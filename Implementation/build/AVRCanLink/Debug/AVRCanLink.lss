
AVRCanLink.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000010a  00800100  00001730  000017c4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00001730  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          000000cf  0080020a  0080020a  000018ce  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000018ce  2**0
                  CONTENTS, READONLY
  4 .debug_aranges 00000538  00000000  00000000  000018fe  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00004367  00000000  00000000  00001e36  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00001299  00000000  00000000  0000619d  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   000024b9  00000000  00000000  00007436  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000d64  00000000  00000000  000098f0  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00001bb5  00000000  00000000  0000a654  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    000027f5  00000000  00000000  0000c209  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000458  00000000  00000000  0000e9fe  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	12 c1       	rjmp	.+548    	; 0x226 <__ctors_end>
       2:	00 00       	nop
       4:	2e c1       	rjmp	.+604    	; 0x262 <__bad_interrupt>
       6:	00 00       	nop
       8:	2c c1       	rjmp	.+600    	; 0x262 <__bad_interrupt>
       a:	00 00       	nop
       c:	2a c1       	rjmp	.+596    	; 0x262 <__bad_interrupt>
       e:	00 00       	nop
      10:	28 c1       	rjmp	.+592    	; 0x262 <__bad_interrupt>
      12:	00 00       	nop
      14:	26 c1       	rjmp	.+588    	; 0x262 <__bad_interrupt>
      16:	00 00       	nop
      18:	24 c1       	rjmp	.+584    	; 0x262 <__bad_interrupt>
      1a:	00 00       	nop
      1c:	22 c1       	rjmp	.+580    	; 0x262 <__bad_interrupt>
      1e:	00 00       	nop
      20:	20 c1       	rjmp	.+576    	; 0x262 <__bad_interrupt>
      22:	00 00       	nop
      24:	1e c1       	rjmp	.+572    	; 0x262 <__bad_interrupt>
      26:	00 00       	nop
      28:	1c c1       	rjmp	.+568    	; 0x262 <__bad_interrupt>
      2a:	00 00       	nop
      2c:	1a c1       	rjmp	.+564    	; 0x262 <__bad_interrupt>
      2e:	00 00       	nop
      30:	18 c1       	rjmp	.+560    	; 0x262 <__bad_interrupt>
      32:	00 00       	nop
      34:	16 c1       	rjmp	.+556    	; 0x262 <__bad_interrupt>
      36:	00 00       	nop
      38:	14 c1       	rjmp	.+552    	; 0x262 <__bad_interrupt>
      3a:	00 00       	nop
      3c:	12 c1       	rjmp	.+548    	; 0x262 <__bad_interrupt>
      3e:	00 00       	nop
      40:	0c 94 41 08 	jmp	0x1082	; 0x1082 <__vector_16>
      44:	0c 94 4b 08 	jmp	0x1096	; 0x1096 <__vector_17>
      48:	0d c1       	rjmp	.+538    	; 0x264 <__vector_18>
      4a:	00 00       	nop
      4c:	0a c1       	rjmp	.+532    	; 0x262 <__bad_interrupt>
      4e:	00 00       	nop
      50:	08 c1       	rjmp	.+528    	; 0x262 <__bad_interrupt>
      52:	00 00       	nop
      54:	0c 94 af 0a 	jmp	0x155e	; 0x155e <__vector_21>
      58:	04 c1       	rjmp	.+520    	; 0x262 <__bad_interrupt>
      5a:	00 00       	nop
      5c:	02 c1       	rjmp	.+516    	; 0x262 <__bad_interrupt>
      5e:	00 00       	nop
      60:	00 c1       	rjmp	.+512    	; 0x262 <__bad_interrupt>
      62:	00 00       	nop
      64:	fe c0       	rjmp	.+508    	; 0x262 <__bad_interrupt>
      66:	00 00       	nop
      68:	fc c0       	rjmp	.+504    	; 0x262 <__bad_interrupt>
      6a:	00 00       	nop
      6c:	fa c0       	rjmp	.+500    	; 0x262 <__bad_interrupt>
      6e:	00 00       	nop
      70:	f8 c0       	rjmp	.+496    	; 0x262 <__bad_interrupt>
      72:	00 00       	nop
      74:	f6 c0       	rjmp	.+492    	; 0x262 <__bad_interrupt>
      76:	00 00       	nop
      78:	f4 c0       	rjmp	.+488    	; 0x262 <__bad_interrupt>
      7a:	00 00       	nop
      7c:	f2 c0       	rjmp	.+484    	; 0x262 <__bad_interrupt>
      7e:	00 00       	nop
      80:	f0 c0       	rjmp	.+480    	; 0x262 <__bad_interrupt>
      82:	00 00       	nop
      84:	ee c0       	rjmp	.+476    	; 0x262 <__bad_interrupt>
      86:	00 00       	nop
      88:	ec c0       	rjmp	.+472    	; 0x262 <__bad_interrupt>
      8a:	00 00       	nop
      8c:	0c 94 76 0a 	jmp	0x14ec	; 0x14ec <__vector_35>
      90:	e8 c0       	rjmp	.+464    	; 0x262 <__bad_interrupt>
      92:	00 00       	nop
      94:	64 0a       	sbc	r6, r20
      96:	6a 0a       	sbc	r6, r26
      98:	6a 0a       	sbc	r6, r26
      9a:	6a 0a       	sbc	r6, r26
      9c:	6a 0a       	sbc	r6, r26
      9e:	6a 0a       	sbc	r6, r26
      a0:	6a 0a       	sbc	r6, r26
      a2:	6a 0a       	sbc	r6, r26
      a4:	95 08       	sbc	r9, r5
      a6:	6a 0a       	sbc	r6, r26
      a8:	6a 0a       	sbc	r6, r26
      aa:	6a 0a       	sbc	r6, r26
      ac:	6a 0a       	sbc	r6, r26
      ae:	6a 0a       	sbc	r6, r26
      b0:	6a 0a       	sbc	r6, r26
      b2:	6a 0a       	sbc	r6, r26
      b4:	95 08       	sbc	r9, r5
      b6:	6a 0a       	sbc	r6, r26
      b8:	6a 0a       	sbc	r6, r26
      ba:	6a 0a       	sbc	r6, r26
      bc:	6a 0a       	sbc	r6, r26
      be:	6a 0a       	sbc	r6, r26
      c0:	6a 0a       	sbc	r6, r26
      c2:	6a 0a       	sbc	r6, r26
      c4:	a9 08       	sbc	r10, r9
      c6:	6a 0a       	sbc	r6, r26
      c8:	6a 0a       	sbc	r6, r26
      ca:	6a 0a       	sbc	r6, r26
      cc:	6a 0a       	sbc	r6, r26
      ce:	6a 0a       	sbc	r6, r26
      d0:	6a 0a       	sbc	r6, r26
      d2:	6a 0a       	sbc	r6, r26
      d4:	5a 09       	sbc	r21, r10
      d6:	6a 0a       	sbc	r6, r26
      d8:	6a 0a       	sbc	r6, r26
      da:	6a 0a       	sbc	r6, r26
      dc:	6a 0a       	sbc	r6, r26
      de:	6a 0a       	sbc	r6, r26
      e0:	6a 0a       	sbc	r6, r26
      e2:	6a 0a       	sbc	r6, r26
      e4:	a9 08       	sbc	r10, r9
      e6:	6a 0a       	sbc	r6, r26
      e8:	6a 0a       	sbc	r6, r26
      ea:	6a 0a       	sbc	r6, r26
      ec:	6a 0a       	sbc	r6, r26
      ee:	6a 0a       	sbc	r6, r26
      f0:	6a 0a       	sbc	r6, r26
      f2:	6a 0a       	sbc	r6, r26
      f4:	e6 08       	sbc	r14, r6
      f6:	6a 0a       	sbc	r6, r26
      f8:	6a 0a       	sbc	r6, r26
      fa:	6a 0a       	sbc	r6, r26
      fc:	6a 0a       	sbc	r6, r26
      fe:	6a 0a       	sbc	r6, r26
     100:	6a 0a       	sbc	r6, r26
     102:	6a 0a       	sbc	r6, r26
     104:	5c 0a       	sbc	r5, r28
     106:	6a 0a       	sbc	r6, r26
     108:	6a 0a       	sbc	r6, r26
     10a:	6a 0a       	sbc	r6, r26
     10c:	6a 0a       	sbc	r6, r26
     10e:	6a 0a       	sbc	r6, r26
     110:	6a 0a       	sbc	r6, r26
     112:	6a 0a       	sbc	r6, r26
     114:	ee 08       	sbc	r14, r14
     116:	6a 0a       	sbc	r6, r26
     118:	6a 0a       	sbc	r6, r26
     11a:	6a 0a       	sbc	r6, r26
     11c:	6a 0a       	sbc	r6, r26
     11e:	6a 0a       	sbc	r6, r26
     120:	6a 0a       	sbc	r6, r26
     122:	6a 0a       	sbc	r6, r26
     124:	5a 09       	sbc	r21, r10
     126:	6a 0a       	sbc	r6, r26
     128:	6a 0a       	sbc	r6, r26
     12a:	6a 0a       	sbc	r6, r26
     12c:	6a 0a       	sbc	r6, r26
     12e:	6a 0a       	sbc	r6, r26
     130:	6a 0a       	sbc	r6, r26
     132:	6a 0a       	sbc	r6, r26
     134:	f6 08       	sbc	r15, r6
     136:	6a 0a       	sbc	r6, r26
     138:	6a 0a       	sbc	r6, r26
     13a:	6a 0a       	sbc	r6, r26
     13c:	6a 0a       	sbc	r6, r26
     13e:	6a 0a       	sbc	r6, r26
     140:	6a 0a       	sbc	r6, r26
     142:	6a 0a       	sbc	r6, r26
     144:	5a 09       	sbc	r21, r10
     146:	6a 0a       	sbc	r6, r26
     148:	6a 0a       	sbc	r6, r26
     14a:	6a 0a       	sbc	r6, r26
     14c:	6a 0a       	sbc	r6, r26
     14e:	6a 0a       	sbc	r6, r26
     150:	6a 0a       	sbc	r6, r26
     152:	6a 0a       	sbc	r6, r26
     154:	6a 09       	sbc	r22, r10
     156:	6a 0a       	sbc	r6, r26
     158:	6a 0a       	sbc	r6, r26
     15a:	6a 0a       	sbc	r6, r26
     15c:	6a 0a       	sbc	r6, r26
     15e:	6a 0a       	sbc	r6, r26
     160:	6a 0a       	sbc	r6, r26
     162:	6a 0a       	sbc	r6, r26
     164:	62 09       	sbc	r22, r2
     166:	6a 0a       	sbc	r6, r26
     168:	6a 0a       	sbc	r6, r26
     16a:	6a 0a       	sbc	r6, r26
     16c:	6a 0a       	sbc	r6, r26
     16e:	6a 0a       	sbc	r6, r26
     170:	6a 0a       	sbc	r6, r26
     172:	6a 0a       	sbc	r6, r26
     174:	6a 09       	sbc	r22, r10
     176:	6a 0a       	sbc	r6, r26
     178:	6a 0a       	sbc	r6, r26
     17a:	6a 0a       	sbc	r6, r26
     17c:	6a 0a       	sbc	r6, r26
     17e:	6a 0a       	sbc	r6, r26
     180:	6a 0a       	sbc	r6, r26
     182:	6a 0a       	sbc	r6, r26
     184:	62 09       	sbc	r22, r2
     186:	6a 0a       	sbc	r6, r26
     188:	6a 0a       	sbc	r6, r26
     18a:	6a 0a       	sbc	r6, r26
     18c:	6a 0a       	sbc	r6, r26
     18e:	6a 0a       	sbc	r6, r26
     190:	6a 0a       	sbc	r6, r26
     192:	6a 0a       	sbc	r6, r26
     194:	7f 09       	sbc	r23, r15
     196:	6a 0a       	sbc	r6, r26
     198:	6a 0a       	sbc	r6, r26
     19a:	6a 0a       	sbc	r6, r26
     19c:	6a 0a       	sbc	r6, r26
     19e:	6a 0a       	sbc	r6, r26
     1a0:	6a 0a       	sbc	r6, r26
     1a2:	6a 0a       	sbc	r6, r26
     1a4:	c9 09       	sbc	r28, r9
     1a6:	6a 0a       	sbc	r6, r26
     1a8:	6a 0a       	sbc	r6, r26
     1aa:	6a 0a       	sbc	r6, r26
     1ac:	6a 0a       	sbc	r6, r26
     1ae:	6a 0a       	sbc	r6, r26
     1b0:	6a 0a       	sbc	r6, r26
     1b2:	6a 0a       	sbc	r6, r26
     1b4:	7f 09       	sbc	r23, r15
     1b6:	6a 0a       	sbc	r6, r26
     1b8:	6a 0a       	sbc	r6, r26
     1ba:	6a 0a       	sbc	r6, r26
     1bc:	6a 0a       	sbc	r6, r26
     1be:	6a 0a       	sbc	r6, r26
     1c0:	6a 0a       	sbc	r6, r26
     1c2:	6a 0a       	sbc	r6, r26
     1c4:	c9 09       	sbc	r28, r9
     1c6:	6a 0a       	sbc	r6, r26
     1c8:	6a 0a       	sbc	r6, r26
     1ca:	6a 0a       	sbc	r6, r26
     1cc:	6a 0a       	sbc	r6, r26
     1ce:	6a 0a       	sbc	r6, r26
     1d0:	6a 0a       	sbc	r6, r26
     1d2:	6a 0a       	sbc	r6, r26
     1d4:	bc 09       	sbc	r27, r12
     1d6:	6a 0a       	sbc	r6, r26
     1d8:	6a 0a       	sbc	r6, r26
     1da:	6a 0a       	sbc	r6, r26
     1dc:	6a 0a       	sbc	r6, r26
     1de:	6a 0a       	sbc	r6, r26
     1e0:	6a 0a       	sbc	r6, r26
     1e2:	6a 0a       	sbc	r6, r26
     1e4:	d1 09       	sbc	r29, r1
     1e6:	6a 0a       	sbc	r6, r26
     1e8:	6a 0a       	sbc	r6, r26
     1ea:	6a 0a       	sbc	r6, r26
     1ec:	6a 0a       	sbc	r6, r26
     1ee:	6a 0a       	sbc	r6, r26
     1f0:	6a 0a       	sbc	r6, r26
     1f2:	6a 0a       	sbc	r6, r26
     1f4:	d1 09       	sbc	r29, r1
     1f6:	6a 0a       	sbc	r6, r26
     1f8:	6a 0a       	sbc	r6, r26
     1fa:	6a 0a       	sbc	r6, r26
     1fc:	6a 0a       	sbc	r6, r26
     1fe:	6a 0a       	sbc	r6, r26
     200:	6a 0a       	sbc	r6, r26
     202:	6a 0a       	sbc	r6, r26
     204:	eb 09       	sbc	r30, r11
     206:	6a 0a       	sbc	r6, r26
     208:	6a 0a       	sbc	r6, r26
     20a:	6a 0a       	sbc	r6, r26
     20c:	6a 0a       	sbc	r6, r26
     20e:	6a 0a       	sbc	r6, r26
     210:	6a 0a       	sbc	r6, r26
     212:	6a 0a       	sbc	r6, r26
     214:	c9 09       	sbc	r28, r9
     216:	6a 0a       	sbc	r6, r26
     218:	6a 0a       	sbc	r6, r26
     21a:	6a 0a       	sbc	r6, r26
     21c:	6a 0a       	sbc	r6, r26
     21e:	6a 0a       	sbc	r6, r26
     220:	6a 0a       	sbc	r6, r26
     222:	6a 0a       	sbc	r6, r26
     224:	5b 09       	sbc	r21, r11

00000226 <__ctors_end>:
     226:	11 24       	eor	r1, r1
     228:	1f be       	out	0x3f, r1	; 63
     22a:	cf ef       	ldi	r28, 0xFF	; 255
     22c:	d0 e1       	ldi	r29, 0x10	; 16
     22e:	de bf       	out	0x3e, r29	; 62
     230:	cd bf       	out	0x3d, r28	; 61

00000232 <__do_copy_data>:
     232:	12 e0       	ldi	r17, 0x02	; 2
     234:	a0 e0       	ldi	r26, 0x00	; 0
     236:	b1 e0       	ldi	r27, 0x01	; 1
     238:	e0 e3       	ldi	r30, 0x30	; 48
     23a:	f7 e1       	ldi	r31, 0x17	; 23
     23c:	00 e0       	ldi	r16, 0x00	; 0
     23e:	0b bf       	out	0x3b, r16	; 59
     240:	02 c0       	rjmp	.+4      	; 0x246 <__do_copy_data+0x14>
     242:	07 90       	elpm	r0, Z+
     244:	0d 92       	st	X+, r0
     246:	aa 30       	cpi	r26, 0x0A	; 10
     248:	b1 07       	cpc	r27, r17
     24a:	d9 f7       	brne	.-10     	; 0x242 <__do_copy_data+0x10>

0000024c <__do_clear_bss>:
     24c:	22 e0       	ldi	r18, 0x02	; 2
     24e:	aa e0       	ldi	r26, 0x0A	; 10
     250:	b2 e0       	ldi	r27, 0x02	; 2
     252:	01 c0       	rjmp	.+2      	; 0x256 <.do_clear_bss_start>

00000254 <.do_clear_bss_loop>:
     254:	1d 92       	st	X+, r1

00000256 <.do_clear_bss_start>:
     256:	a9 3d       	cpi	r26, 0xD9	; 217
     258:	b2 07       	cpc	r27, r18
     25a:	e1 f7       	brne	.-8      	; 0x254 <.do_clear_bss_loop>
     25c:	d7 d2       	rcall	.+1454   	; 0x80c <main>
     25e:	0c 94 96 0b 	jmp	0x172c	; 0x172c <_exit>

00000262 <__bad_interrupt>:
     262:	ce ce       	rjmp	.-612    	; 0x0 <__vectors>

00000264 <__vector_18>:
/*******************************************************************************************/
/*    F U N C T I O N   P R O T O T Y P E S                                                */
/*******************************************************************************************/
#pragma vector=SIG_CAN_INTERRUPT1
ISR(SIG_CAN_INTERRUPT1)
{
     264:	1f 92       	push	r1
     266:	0f 92       	push	r0
     268:	0f b6       	in	r0, 0x3f	; 63
     26a:	0f 92       	push	r0
     26c:	11 24       	eor	r1, r1
     26e:	0b b6       	in	r0, 0x3b	; 59
     270:	0f 92       	push	r0
     272:	2f 93       	push	r18
     274:	3f 93       	push	r19
     276:	4f 93       	push	r20
     278:	5f 93       	push	r21
     27a:	6f 93       	push	r22
     27c:	7f 93       	push	r23
     27e:	8f 93       	push	r24
     280:	9f 93       	push	r25
     282:	af 93       	push	r26
     284:	bf 93       	push	r27
     286:	ef 93       	push	r30
     288:	ff 93       	push	r31
	CanMW_set_mutex(MUTEX_LOCK_CHANNEL);
     28a:	81 e0       	ldi	r24, 0x01	; 1
     28c:	28 d2       	rcall	.+1104   	; 0x6de <CanMW_set_mutex>
	CanMW_ReceivedRxHandle();
     28e:	8d d1       	rcall	.+794    	; 0x5aa <CanMW_ReceivedRxHandle>
	CanMW_set_mutex(MUTEX_RELEASE_CHANNEL);
     290:	80 e0       	ldi	r24, 0x00	; 0
     292:	25 d2       	rcall	.+1098   	; 0x6de <CanMW_set_mutex>
}
     294:	ff 91       	pop	r31
     296:	ef 91       	pop	r30
     298:	bf 91       	pop	r27
     29a:	af 91       	pop	r26
     29c:	9f 91       	pop	r25
     29e:	8f 91       	pop	r24
     2a0:	7f 91       	pop	r23
     2a2:	6f 91       	pop	r22
     2a4:	5f 91       	pop	r21
     2a6:	4f 91       	pop	r20
     2a8:	3f 91       	pop	r19
     2aa:	2f 91       	pop	r18
     2ac:	0f 90       	pop	r0
     2ae:	0b be       	out	0x3b, r0	; 59
     2b0:	0f 90       	pop	r0
     2b2:	0f be       	out	0x3f, r0	; 63
     2b4:	0f 90       	pop	r0
     2b6:	1f 90       	pop	r1
     2b8:	18 95       	reti

000002ba <Can_App_Init>:
	schedulerSetupItem( 3, TRUE, PRD_SPEED );
#endif
	ENABLE_CAN_RECEIVE_INTERRUPT();
	can_initialization=1;
}
void CAN_App_50ms_Task(void){
     2ba:	cf 92       	push	r12
     2bc:	df 92       	push	r13
     2be:	ef 92       	push	r14
     2c0:	0f 93       	push	r16
     2c2:	1f 93       	push	r17
     2c4:	ba d0       	rcall	.+372    	; 0x43a <Can_Driver_Init>
     2c6:	7e d1       	rcall	.+764    	; 0x5c4 <CanMW_APP_Init>
     2c8:	c1 2c       	mov	r12, r1
     2ca:	d1 2c       	mov	r13, r1
     2cc:	ee 24       	eor	r14, r14
     2ce:	e3 94       	inc	r14
     2d0:	0f ef       	ldi	r16, 0xFF	; 255
     2d2:	17 e0       	ldi	r17, 0x07	; 7
     2d4:	20 e2       	ldi	r18, 0x20	; 32
     2d6:	30 e0       	ldi	r19, 0x00	; 0
     2d8:	48 e0       	ldi	r20, 0x08	; 8
     2da:	60 e0       	ldi	r22, 0x00	; 0
     2dc:	80 e0       	ldi	r24, 0x00	; 0
     2de:	77 d1       	rcall	.+750    	; 0x5ce <CanMW_InitMail_Box>
     2e0:	0f 2e       	mov	r0, r31
     2e2:	f7 e2       	ldi	r31, 0x27	; 39
     2e4:	cf 2e       	mov	r12, r31
     2e6:	d1 2c       	mov	r13, r1
     2e8:	f0 2d       	mov	r31, r0
     2ea:	20 e6       	ldi	r18, 0x60	; 96
     2ec:	31 e0       	ldi	r19, 0x01	; 1
     2ee:	48 e0       	ldi	r20, 0x08	; 8
     2f0:	62 e0       	ldi	r22, 0x02	; 2
     2f2:	81 e0       	ldi	r24, 0x01	; 1
     2f4:	6c d1       	rcall	.+728    	; 0x5ce <CanMW_InitMail_Box>
     2f6:	0f 2e       	mov	r0, r31
     2f8:	f9 e0       	ldi	r31, 0x09	; 9
     2fa:	cf 2e       	mov	r12, r31
     2fc:	d1 2c       	mov	r13, r1
     2fe:	f0 2d       	mov	r31, r0
     300:	23 e9       	ldi	r18, 0x93	; 147
     302:	30 e0       	ldi	r19, 0x00	; 0
     304:	48 e0       	ldi	r20, 0x08	; 8
     306:	62 e0       	ldi	r22, 0x02	; 2
     308:	82 e0       	ldi	r24, 0x02	; 2
     30a:	61 d1       	rcall	.+706    	; 0x5ce <CanMW_InitMail_Box>
     30c:	21 e8       	ldi	r18, 0x81	; 129
     30e:	30 e0       	ldi	r19, 0x00	; 0
     310:	48 e0       	ldi	r20, 0x08	; 8
     312:	62 e0       	ldi	r22, 0x02	; 2
     314:	83 e0       	ldi	r24, 0x03	; 3
     316:	5b d1       	rcall	.+694    	; 0x5ce <CanMW_InitMail_Box>
     318:	0f 2e       	mov	r0, r31
     31a:	f7 e2       	ldi	r31, 0x27	; 39
     31c:	cf 2e       	mov	r12, r31
     31e:	d1 2c       	mov	r13, r1
     320:	f0 2d       	mov	r31, r0
     322:	20 e2       	ldi	r18, 0x20	; 32
     324:	31 e0       	ldi	r19, 0x01	; 1
     326:	48 e0       	ldi	r20, 0x08	; 8
     328:	60 e0       	ldi	r22, 0x00	; 0
     32a:	84 e0       	ldi	r24, 0x04	; 4
     32c:	50 d1       	rcall	.+672    	; 0x5ce <CanMW_InitMail_Box>
     32e:	0f 2e       	mov	r0, r31
     330:	fa e0       	ldi	r31, 0x0A	; 10
     332:	cf 2e       	mov	r12, r31
     334:	d1 2c       	mov	r13, r1
     336:	f0 2d       	mov	r31, r0
     338:	20 e1       	ldi	r18, 0x10	; 16
     33a:	30 e0       	ldi	r19, 0x00	; 0
     33c:	48 e0       	ldi	r20, 0x08	; 8
     33e:	62 e0       	ldi	r22, 0x02	; 2
     340:	85 e0       	ldi	r24, 0x05	; 5
     342:	45 d1       	rcall	.+650    	; 0x5ce <CanMW_InitMail_Box>
     344:	47 e2       	ldi	r20, 0x27	; 39
     346:	61 e0       	ldi	r22, 0x01	; 1
     348:	81 e0       	ldi	r24, 0x01	; 1
     34a:	d7 d5       	rcall	.+2990   	; 0xefa <schedulerSetupItem>
     34c:	49 e0       	ldi	r20, 0x09	; 9
     34e:	61 e0       	ldi	r22, 0x01	; 1
     350:	82 e0       	ldi	r24, 0x02	; 2
     352:	d3 d5       	rcall	.+2982   	; 0xefa <schedulerSetupItem>
     354:	49 e0       	ldi	r20, 0x09	; 9
     356:	61 e0       	ldi	r22, 0x01	; 1
     358:	83 e0       	ldi	r24, 0x03	; 3
     35a:	cf d5       	rcall	.+2974   	; 0xefa <schedulerSetupItem>
     35c:	eb ed       	ldi	r30, 0xDB	; 219
     35e:	f0 e0       	ldi	r31, 0x00	; 0
     360:	80 81       	ld	r24, Z
     362:	80 62       	ori	r24, 0x20	; 32
     364:	80 83       	st	Z, r24
     366:	81 e0       	ldi	r24, 0x01	; 1
     368:	80 93 0a 02 	sts	0x020A, r24
     36c:	1f 91       	pop	r17
     36e:	0f 91       	pop	r16
     370:	ef 90       	pop	r14
     372:	df 90       	pop	r13
     374:	cf 90       	pop	r12
     376:	08 95       	ret

00000378 <ErrorTask>:
}

void ErrorTask(void){
	Can_err_type status_error=0;

	status_error=Get_CAN_Tx_error();
     378:	50 d0       	rcall	.+160    	; 0x41a <Get_CAN_Tx_error>
	if(status_error){
     37a:	88 23       	and	r24, r24
     37c:	19 f0       	breq	.+6      	; 0x384 <ErrorTask+0xc>
		Led_Err(LED_INDICATOR_ON);
     37e:	80 e0       	ldi	r24, 0x00	; 0
     380:	3a c2       	rjmp	.+1140   	; 0x7f6 <Led_Err>
     382:	08 95       	ret
	}else{
		Led_Err(LED_INDICATOR_OFF);
     384:	81 e0       	ldi	r24, 0x01	; 1
     386:	37 c2       	rjmp	.+1134   	; 0x7f6 <Led_Err>
     388:	08 95       	ret

0000038a <Can_App_IDLE_Hook>:
void CAN_App_50ms_Task(void){


}
void Can_App_IDLE_Hook(void){
	if(CanMW_Event_Get()){
     38a:	ac d1       	rcall	.+856    	; 0x6e4 <CanMW_Event_Get>
     38c:	88 23       	and	r24, r24
     38e:	59 f0       	breq	.+22     	; 0x3a6 <Can_App_IDLE_Hook+0x1c>
		CanMW_ReSync_Driver();
     390:	3a d1       	rcall	.+628    	; 0x606 <CanMW_ReSync_Driver>

		CanMW_Event_Clean();
     392:	ab d1       	rcall	.+854    	; 0x6ea <CanMW_Event_Clean>
		ENABLE_CAN_RECEIVE_INTERRUPT();
     394:	eb ed       	ldi	r30, 0xDB	; 219
     396:	f0 e0       	ldi	r31, 0x00	; 0
     398:	80 81       	ld	r24, Z
     39a:	80 62       	ori	r24, 0x20	; 32
     39c:	80 83       	st	Z, r24
		ENABLE_ALL_INTERRUPTS();
     39e:	80 81       	ld	r24, Z
     3a0:	80 68       	ori	r24, 0x80	; 128
     3a2:	80 83       	st	Z, r24
		sei();
     3a4:	78 94       	sei

	#if TEST_MODE_CAN_TX == 1
	TX_CAN_SEND_DummyTask();
	#endif

	if(can_initialization==0){
     3a6:	80 91 0a 02 	lds	r24, 0x020A
     3aa:	81 11       	cpse	r24, r1
     3ac:	04 c0       	rjmp	.+8      	; 0x3b6 <Can_App_IDLE_Hook+0x2c>
		CanMW_ReConf_Driver();
     3ae:	66 d1       	rcall	.+716    	; 0x67c <CanMW_ReConf_Driver>
		can_initialization=1;
     3b0:	81 e0       	ldi	r24, 0x01	; 1
     3b2:	80 93 0a 02 	sts	0x020A, r24
	}
#if MCU_STATUS_REPORT_CAN == 1	
StatusCAN_Report_MCU();
     3b6:	d8 d1       	rcall	.+944    	; 0x768 <StatusCAN_Report_MCU>
#endif

#if CAN_ERROR_TX_REPORT_LED == 1
	ErrorTask();
     3b8:	df cf       	rjmp	.-66     	; 0x378 <ErrorTask>
     3ba:	08 95       	ret

000003bc <Get_CAN_ID>:
	}else{
		status=CAN_ERROR;
	}
	ENABLE_CAN_RECEIVE_INTERRUPT();
	return status;
}
     3bc:	80 91 f3 00 	lds	r24, 0x00F3
     3c0:	20 91 f2 00 	lds	r18, 0x00F2
     3c4:	90 e0       	ldi	r25, 0x00	; 0
     3c6:	88 0f       	add	r24, r24
     3c8:	99 1f       	adc	r25, r25
     3ca:	88 0f       	add	r24, r24
     3cc:	99 1f       	adc	r25, r25
     3ce:	88 0f       	add	r24, r24
     3d0:	99 1f       	adc	r25, r25
     3d2:	22 95       	swap	r18
     3d4:	26 95       	lsr	r18
     3d6:	27 70       	andi	r18, 0x07	; 7
     3d8:	82 0f       	add	r24, r18
     3da:	91 1d       	adc	r25, r1
     3dc:	08 95       	ret

000003de <Can_Set_MSG_ID>:
     3de:	9c 01       	movw	r18, r24
     3e0:	36 95       	lsr	r19
     3e2:	27 95       	ror	r18
     3e4:	36 95       	lsr	r19
     3e6:	27 95       	ror	r18
     3e8:	36 95       	lsr	r19
     3ea:	27 95       	ror	r18
     3ec:	20 93 f3 00 	sts	0x00F3, r18
     3f0:	82 95       	swap	r24
     3f2:	88 0f       	add	r24, r24
     3f4:	80 7e       	andi	r24, 0xE0	; 224
     3f6:	80 93 f2 00 	sts	0x00F2, r24
     3fa:	08 95       	ret

000003fc <Can_Set_IDMask>:
     3fc:	9c 01       	movw	r18, r24
     3fe:	36 95       	lsr	r19
     400:	27 95       	ror	r18
     402:	36 95       	lsr	r19
     404:	27 95       	ror	r18
     406:	36 95       	lsr	r19
     408:	27 95       	ror	r18
     40a:	20 93 f7 00 	sts	0x00F7, r18
     40e:	82 95       	swap	r24
     410:	88 0f       	add	r24, r24
     412:	80 7e       	andi	r24, 0xE0	; 224
     414:	80 93 f6 00 	sts	0x00F6, r24
     418:	08 95       	ret

0000041a <Get_CAN_Tx_error>:
     41a:	80 91 ea 00 	lds	r24, 0x00EA
     41e:	08 95       	ret

00000420 <Get_CAN_Rx_error>:
     420:	80 91 eb 00 	lds	r24, 0x00EB
     424:	08 95       	ret

00000426 <Get_Can_Time_Stamp>:
     426:	e9 ef       	ldi	r30, 0xF9	; 249
     428:	f0 e0       	ldi	r31, 0x00	; 0
     42a:	80 81       	ld	r24, Z
     42c:	20 81       	ld	r18, Z
     42e:	90 e0       	ldi	r25, 0x00	; 0
     430:	98 2f       	mov	r25, r24
     432:	88 27       	eor	r24, r24
     434:	82 0f       	add	r24, r18
     436:	91 1d       	adc	r25, r1
     438:	08 95       	ret

0000043a <Can_Driver_Init>:
     43a:	cf 93       	push	r28
     43c:	df 93       	push	r29
     43e:	e8 ed       	ldi	r30, 0xD8	; 216
     440:	f0 e0       	ldi	r31, 0x00	; 0
     442:	80 81       	ld	r24, Z
     444:	81 60       	ori	r24, 0x01	; 1
     446:	80 83       	st	Z, r24
     448:	80 81       	ld	r24, Z
     44a:	8d 7f       	andi	r24, 0xFD	; 253
     44c:	80 83       	st	Z, r24
     44e:	80 e0       	ldi	r24, 0x00	; 0
     450:	cd ee       	ldi	r28, 0xED	; 237
     452:	d0 e0       	ldi	r29, 0x00	; 0
     454:	af ee       	ldi	r26, 0xEF	; 239
     456:	b0 e0       	ldi	r27, 0x00	; 0
     458:	ee ee       	ldi	r30, 0xEE	; 238
     45a:	f0 e0       	ldi	r31, 0x00	; 0
     45c:	98 2f       	mov	r25, r24
     45e:	92 95       	swap	r25
     460:	90 7f       	andi	r25, 0xF0	; 240
     462:	98 83       	st	Y, r25
     464:	1c 92       	st	X, r1
     466:	10 82       	st	Z, r1
     468:	8f 5f       	subi	r24, 0xFF	; 255
     46a:	8f 30       	cpi	r24, 0x0F	; 15
     46c:	b9 f7       	brne	.-18     	; 0x45c <Can_Driver_Init+0x22>
     46e:	86 e0       	ldi	r24, 0x06	; 6
     470:	80 93 e2 00 	sts	0x00E2, r24
     474:	84 e0       	ldi	r24, 0x04	; 4
     476:	80 93 e3 00 	sts	0x00E3, r24
     47a:	83 e1       	ldi	r24, 0x13	; 19
     47c:	80 93 e4 00 	sts	0x00E4, r24
     480:	e8 ed       	ldi	r30, 0xD8	; 216
     482:	f0 e0       	ldi	r31, 0x00	; 0
     484:	80 81       	ld	r24, Z
     486:	8d 7f       	andi	r24, 0xFD	; 253
     488:	80 83       	st	Z, r24
     48a:	df 91       	pop	r29
     48c:	cf 91       	pop	r28
     48e:	08 95       	ret

00000490 <CAN_MOB_Interrupt_Control>:
     490:	88 30       	cpi	r24, 0x08	; 8
     492:	70 f0       	brcs	.+28     	; 0x4b0 <CAN_MOB_Interrupt_Control+0x20>
     494:	ef ed       	ldi	r30, 0xDF	; 223
     496:	f0 e0       	ldi	r31, 0x00	; 0
     498:	20 81       	ld	r18, Z
     49a:	70 e0       	ldi	r23, 0x00	; 0
     49c:	ab 01       	movw	r20, r22
     49e:	02 c0       	rjmp	.+4      	; 0x4a4 <CAN_MOB_Interrupt_Control+0x14>
     4a0:	44 0f       	add	r20, r20
     4a2:	55 1f       	adc	r21, r21
     4a4:	8a 95       	dec	r24
     4a6:	e2 f7       	brpl	.-8      	; 0x4a0 <CAN_MOB_Interrupt_Control+0x10>
     4a8:	ca 01       	movw	r24, r20
     4aa:	82 2b       	or	r24, r18
     4ac:	80 83       	st	Z, r24
     4ae:	08 95       	ret
     4b0:	ee ed       	ldi	r30, 0xDE	; 222
     4b2:	f0 e0       	ldi	r31, 0x00	; 0
     4b4:	20 81       	ld	r18, Z
     4b6:	70 e0       	ldi	r23, 0x00	; 0
     4b8:	ab 01       	movw	r20, r22
     4ba:	02 c0       	rjmp	.+4      	; 0x4c0 <CAN_MOB_Interrupt_Control+0x30>
     4bc:	44 0f       	add	r20, r20
     4be:	55 1f       	adc	r21, r21
     4c0:	8a 95       	dec	r24
     4c2:	e2 f7       	brpl	.-8      	; 0x4bc <CAN_MOB_Interrupt_Control+0x2c>
     4c4:	ca 01       	movw	r24, r20
     4c6:	82 2b       	or	r24, r18
     4c8:	80 83       	st	Z, r24
     4ca:	08 95       	ret

000004cc <Can_Configure_MailBox>:
void Can_Configure_MailBox(MBox_type mailbox,CAN_Mode_type mode,can_dlc_type data_l,CAN_ID_type mbox_id,CAN_ID_type mbox_mask,can_int_ctrl enable_int){
     4cc:	ef 92       	push	r14
     4ce:	0f 93       	push	r16
     4d0:	1f 93       	push	r17
     4d2:	cf 93       	push	r28
     4d4:	c8 2f       	mov	r28, r24
	switch (mode) {
     4d6:	61 30       	cpi	r22, 0x01	; 1
     4d8:	89 f0       	breq	.+34     	; 0x4fc <Can_Configure_MailBox+0x30>
     4da:	62 30       	cpi	r22, 0x02	; 2
     4dc:	d1 f4       	brne	.+52     	; 0x512 <Can_Configure_MailBox+0x46>


	case MAIL_BOX_ENABLE_RX:
		Set_MailBox(mailbox);
     4de:	82 95       	swap	r24
     4e0:	80 7f       	andi	r24, 0xF0	; 240
     4e2:	80 93 ed 00 	sts	0x00ED, r24
		//CAN_MOB_SimpleMode_Set(mode);
		//can_set_dlc(data_l);
		can_mail_box_conf(mode,data_l);
     4e6:	40 58       	subi	r20, 0x80	; 128
     4e8:	40 93 ef 00 	sts	0x00EF, r20
		Can_Set_MSG_ID(mbox_id);
     4ec:	c9 01       	movw	r24, r18
     4ee:	77 df       	rcall	.-274    	; 0x3de <Can_Set_MSG_ID>
		Can_Set_IDMask(mbox_mask);
     4f0:	c8 01       	movw	r24, r16
     4f2:	84 df       	rcall	.-248    	; 0x3fc <Can_Set_IDMask>
		CAN_MOB_Interrupt_Control(mailbox,enable_int);
     4f4:	6e 2d       	mov	r22, r14
     4f6:	8c 2f       	mov	r24, r28
     4f8:	cb df       	rcall	.-106    	; 0x490 <CAN_MOB_Interrupt_Control>
		break;
     4fa:	0b c0       	rjmp	.+22     	; 0x512 <Can_Configure_MailBox+0x46>
	case MAIL_BOX_ENABLE_TX:
		Set_MailBox(mailbox);
     4fc:	c2 95       	swap	r28
     4fe:	c0 7f       	andi	r28, 0xF0	; 240
     500:	c0 93 ed 00 	sts	0x00ED, r28
		//CAN_MOB_SimpleMode_Set(mode);
		//can_set_dlc(data_l);
		can_mail_box_conf(mode,data_l);
     504:	40 5c       	subi	r20, 0xC0	; 192
     506:	40 93 ef 00 	sts	0x00EF, r20
		Can_Set_MSG_ID(mbox_id);
     50a:	c9 01       	movw	r24, r18
     50c:	68 df       	rcall	.-304    	; 0x3de <Can_Set_MSG_ID>
		Can_Set_IDMask(mbox_mask);
     50e:	c8 01       	movw	r24, r16
     510:	75 df       	rcall	.-278    	; 0x3fc <Can_Set_IDMask>

		break;
	}


}
     512:	cf 91       	pop	r28
     514:	1f 91       	pop	r17
     516:	0f 91       	pop	r16
     518:	ef 90       	pop	r14
     51a:	08 95       	ret

0000051c <CanMw_MailBox_Rx_Handler>:
void CanMW_set_mutex(can_Ir_lock state){
	mutex_reg=state;
}
can_Ir_lock CanMW_get_mutex(void){
	return mutex_reg;
}
     51c:	ef 92       	push	r14
     51e:	ff 92       	push	r15
     520:	0f 93       	push	r16
     522:	1f 93       	push	r17
     524:	cf 93       	push	r28
     526:	df 93       	push	r29
     528:	e8 2e       	mov	r14, r24
     52a:	82 95       	swap	r24
     52c:	80 7f       	andi	r24, 0xF0	; 240
     52e:	80 93 ed 00 	sts	0x00ED, r24
     532:	80 91 ef 00 	lds	r24, 0x00EF
     536:	8f 70       	andi	r24, 0x0F	; 15
     538:	f8 2e       	mov	r15, r24
     53a:	0e 2d       	mov	r16, r14
     53c:	10 e0       	ldi	r17, 0x00	; 0
     53e:	86 e1       	ldi	r24, 0x16	; 22
     540:	e8 9e       	mul	r14, r24
     542:	e0 01       	movw	r28, r0
     544:	11 24       	eor	r1, r1
     546:	c1 5b       	subi	r28, 0xB1	; 177
     548:	dd 4f       	sbci	r29, 0xFD	; 253
     54a:	f8 86       	std	Y+8, r15	; 0x08
     54c:	37 df       	rcall	.-402    	; 0x3bc <Get_CAN_ID>
     54e:	9f 83       	std	Y+7, r25	; 0x07
     550:	8e 83       	std	Y+6, r24	; 0x06
     552:	69 df       	rcall	.-302    	; 0x426 <Get_Can_Time_Stamp>
     554:	9b 8b       	std	Y+19, r25	; 0x13
     556:	8a 8b       	std	Y+18, r24	; 0x12
     558:	ff 20       	and	r15, r15
     55a:	b9 f0       	breq	.+46     	; 0x58a <CanMw_MailBox_Rx_Handler+0x6e>
     55c:	80 e0       	ldi	r24, 0x00	; 0
     55e:	cd ee       	ldi	r28, 0xED	; 237
     560:	d0 e0       	ldi	r29, 0x00	; 0
     562:	aa ef       	ldi	r26, 0xFA	; 250
     564:	b0 e0       	ldi	r27, 0x00	; 0
     566:	96 e1       	ldi	r25, 0x16	; 22
     568:	90 9f       	mul	r25, r16
     56a:	90 01       	movw	r18, r0
     56c:	91 9f       	mul	r25, r17
     56e:	30 0d       	add	r19, r0
     570:	11 24       	eor	r1, r1
     572:	21 5b       	subi	r18, 0xB1	; 177
     574:	3d 4f       	sbci	r19, 0xFD	; 253
     576:	48 81       	ld	r20, Y
     578:	9c 91       	ld	r25, X
     57a:	47 70       	andi	r20, 0x07	; 7
     57c:	f9 01       	movw	r30, r18
     57e:	e4 0f       	add	r30, r20
     580:	f1 1d       	adc	r31, r1
     582:	91 87       	std	Z+9, r25	; 0x09
     584:	8f 5f       	subi	r24, 0xFF	; 255
     586:	8f 11       	cpse	r24, r15
     588:	f6 cf       	rjmp	.-20     	; 0x576 <CanMw_MailBox_Rx_Handler+0x5a>
     58a:	8e 2d       	mov	r24, r14
     58c:	d1 d4       	rcall	.+2466   	; 0xf30 <schedulerResetCount>
     58e:	ee ee       	ldi	r30, 0xEE	; 238
     590:	f0 e0       	ldi	r31, 0x00	; 0
     592:	80 81       	ld	r24, Z
     594:	8f 79       	andi	r24, 0x9F	; 159
     596:	80 83       	st	Z, r24
     598:	10 92 ef 00 	sts	0x00EF, r1
     59c:	df 91       	pop	r29
     59e:	cf 91       	pop	r28
     5a0:	1f 91       	pop	r17
     5a2:	0f 91       	pop	r16
     5a4:	ff 90       	pop	r15
     5a6:	ef 90       	pop	r14
     5a8:	08 95       	ret

000005aa <CanMW_ReceivedRxHandle>:
     5aa:	80 91 ec 00 	lds	r24, 0x00EC
     5ae:	82 95       	swap	r24
     5b0:	8f 70       	andi	r24, 0x0F	; 15
     5b2:	80 93 4e 02 	sts	0x024E, r24
     5b6:	80 91 4e 02 	lds	r24, 0x024E
     5ba:	b0 df       	rcall	.-160    	; 0x51c <CanMw_MailBox_Rx_Handler>
     5bc:	81 e0       	ldi	r24, 0x01	; 1
     5be:	80 93 d4 02 	sts	0x02D4, r24
     5c2:	08 95       	ret

000005c4 <CanMW_APP_Init>:
     5c4:	10 92 d4 02 	sts	0x02D4, r1
     5c8:	10 92 d5 02 	sts	0x02D5, r1
     5cc:	08 95       	ret

000005ce <CanMW_InitMail_Box>:
     5ce:	cf 92       	push	r12
     5d0:	df 92       	push	r13
     5d2:	ef 92       	push	r14
     5d4:	0f 93       	push	r16
     5d6:	1f 93       	push	r17
     5d8:	96 e1       	ldi	r25, 0x16	; 22
     5da:	89 9f       	mul	r24, r25
     5dc:	f0 01       	movw	r30, r0
     5de:	11 24       	eor	r1, r1
     5e0:	e1 5b       	subi	r30, 0xB1	; 177
     5e2:	fd 4f       	sbci	r31, 0xFD	; 253
     5e4:	80 83       	st	Z, r24
     5e6:	61 83       	std	Z+1, r22	; 0x01
     5e8:	40 87       	std	Z+8, r20	; 0x08
     5ea:	d5 8a       	std	Z+21, r13	; 0x15
     5ec:	c4 8a       	std	Z+20, r12	; 0x14
     5ee:	37 83       	std	Z+7, r19	; 0x07
     5f0:	26 83       	std	Z+6, r18	; 0x06
     5f2:	14 83       	std	Z+4, r17	; 0x04
     5f4:	03 83       	std	Z+3, r16	; 0x03
     5f6:	e5 82       	std	Z+5, r14	; 0x05
     5f8:	69 df       	rcall	.-302    	; 0x4cc <Can_Configure_MailBox>
     5fa:	1f 91       	pop	r17
     5fc:	0f 91       	pop	r16
     5fe:	ef 90       	pop	r14
     600:	df 90       	pop	r13
     602:	cf 90       	pop	r12
     604:	08 95       	ret

00000606 <CanMW_ReSync_Driver>:
     606:	ef 92       	push	r14
     608:	ff 92       	push	r15
     60a:	0f 93       	push	r16
     60c:	1f 93       	push	r17
     60e:	cf 93       	push	r28
     610:	df 93       	push	r29
     612:	c0 e0       	ldi	r28, 0x00	; 0
     614:	d0 e0       	ldi	r29, 0x00	; 0
     616:	0f 2e       	mov	r0, r31
     618:	f6 e1       	ldi	r31, 0x16	; 22
     61a:	ff 2e       	mov	r15, r31
     61c:	f0 2d       	mov	r31, r0
     61e:	fc 9e       	mul	r15, r28
     620:	f0 01       	movw	r30, r0
     622:	fd 9e       	mul	r15, r29
     624:	f0 0d       	add	r31, r0
     626:	11 24       	eor	r1, r1
     628:	e1 5b       	subi	r30, 0xB1	; 177
     62a:	fd 4f       	sbci	r31, 0xFD	; 253
     62c:	21 81       	ldd	r18, Z+1	; 0x01
     62e:	22 23       	and	r18, r18
     630:	d1 f0       	breq	.+52     	; 0x666 <CanMW_ReSync_Driver+0x60>
     632:	fc 9e       	mul	r15, r28
     634:	f0 01       	movw	r30, r0
     636:	fd 9e       	mul	r15, r29
     638:	f0 0d       	add	r31, r0
     63a:	11 24       	eor	r1, r1
     63c:	e1 5b       	subi	r30, 0xB1	; 177
     63e:	fd 4f       	sbci	r31, 0xFD	; 253
     640:	21 81       	ldd	r18, Z+1	; 0x01
     642:	21 30       	cpi	r18, 0x01	; 1
     644:	81 f0       	breq	.+32     	; 0x666 <CanMW_ReSync_Driver+0x60>
     646:	fc 9e       	mul	r15, r28
     648:	f0 01       	movw	r30, r0
     64a:	fd 9e       	mul	r15, r29
     64c:	f0 0d       	add	r31, r0
     64e:	11 24       	eor	r1, r1
     650:	e1 5b       	subi	r30, 0xB1	; 177
     652:	fd 4f       	sbci	r31, 0xFD	; 253
     654:	e5 80       	ldd	r14, Z+5	; 0x05
     656:	03 81       	ldd	r16, Z+3	; 0x03
     658:	14 81       	ldd	r17, Z+4	; 0x04
     65a:	26 81       	ldd	r18, Z+6	; 0x06
     65c:	37 81       	ldd	r19, Z+7	; 0x07
     65e:	40 85       	ldd	r20, Z+8	; 0x08
     660:	61 81       	ldd	r22, Z+1	; 0x01
     662:	80 81       	ld	r24, Z
     664:	33 df       	rcall	.-410    	; 0x4cc <Can_Configure_MailBox>
     666:	21 96       	adiw	r28, 0x01	; 1
     668:	c5 30       	cpi	r28, 0x05	; 5
     66a:	d1 05       	cpc	r29, r1
     66c:	c1 f6       	brne	.-80     	; 0x61e <CanMW_ReSync_Driver+0x18>
     66e:	df 91       	pop	r29
     670:	cf 91       	pop	r28
     672:	1f 91       	pop	r17
     674:	0f 91       	pop	r16
     676:	ff 90       	pop	r15
     678:	ef 90       	pop	r14
     67a:	08 95       	ret

0000067c <CanMW_ReConf_Driver>:
     67c:	ef 92       	push	r14
     67e:	ff 92       	push	r15
     680:	0f 93       	push	r16
     682:	1f 93       	push	r17
     684:	cf 93       	push	r28
     686:	df 93       	push	r29
     688:	c0 e0       	ldi	r28, 0x00	; 0
     68a:	d0 e0       	ldi	r29, 0x00	; 0
     68c:	0f 2e       	mov	r0, r31
     68e:	f6 e1       	ldi	r31, 0x16	; 22
     690:	ff 2e       	mov	r15, r31
     692:	f0 2d       	mov	r31, r0
     694:	fc 9e       	mul	r15, r28
     696:	f0 01       	movw	r30, r0
     698:	fd 9e       	mul	r15, r29
     69a:	f0 0d       	add	r31, r0
     69c:	11 24       	eor	r1, r1
     69e:	e1 5b       	subi	r30, 0xB1	; 177
     6a0:	fd 4f       	sbci	r31, 0xFD	; 253
     6a2:	81 81       	ldd	r24, Z+1	; 0x01
     6a4:	88 23       	and	r24, r24
     6a6:	81 f0       	breq	.+32     	; 0x6c8 <CanMW_ReConf_Driver+0x4c>
     6a8:	fc 9e       	mul	r15, r28
     6aa:	f0 01       	movw	r30, r0
     6ac:	fd 9e       	mul	r15, r29
     6ae:	f0 0d       	add	r31, r0
     6b0:	11 24       	eor	r1, r1
     6b2:	e1 5b       	subi	r30, 0xB1	; 177
     6b4:	fd 4f       	sbci	r31, 0xFD	; 253
     6b6:	e5 80       	ldd	r14, Z+5	; 0x05
     6b8:	03 81       	ldd	r16, Z+3	; 0x03
     6ba:	14 81       	ldd	r17, Z+4	; 0x04
     6bc:	26 81       	ldd	r18, Z+6	; 0x06
     6be:	37 81       	ldd	r19, Z+7	; 0x07
     6c0:	40 85       	ldd	r20, Z+8	; 0x08
     6c2:	61 81       	ldd	r22, Z+1	; 0x01
     6c4:	80 81       	ld	r24, Z
     6c6:	02 df       	rcall	.-508    	; 0x4cc <Can_Configure_MailBox>
     6c8:	21 96       	adiw	r28, 0x01	; 1
     6ca:	c5 30       	cpi	r28, 0x05	; 5
     6cc:	d1 05       	cpc	r29, r1
     6ce:	11 f7       	brne	.-60     	; 0x694 <CanMW_ReConf_Driver+0x18>
     6d0:	df 91       	pop	r29
     6d2:	cf 91       	pop	r28
     6d4:	1f 91       	pop	r17
     6d6:	0f 91       	pop	r16
     6d8:	ff 90       	pop	r15
     6da:	ef 90       	pop	r14
     6dc:	08 95       	ret

000006de <CanMW_set_mutex>:
     6de:	80 93 d3 02 	sts	0x02D3, r24
     6e2:	08 95       	ret

000006e4 <CanMW_Event_Get>:

can_event CanMW_Event_Get(void){
	return event_can;
     6e4:	80 91 d4 02 	lds	r24, 0x02D4
}
     6e8:	08 95       	ret

000006ea <CanMW_Event_Clean>:
void CanMW_Event_Clean(void){
	event_can=0;
     6ea:	10 92 d4 02 	sts	0x02D4, r1
     6ee:	08 95       	ret

000006f0 <Get_Message_FromMbox>:
}

void Get_Message_FromMbox(MBox_type mail,CanMw_Message * message){
	memcpy(message,(void*)&MboxControlReg[mail].msg,sizeof(CanMw_Message));
     6f0:	26 e1       	ldi	r18, 0x16	; 22
     6f2:	82 9f       	mul	r24, r18
     6f4:	c0 01       	movw	r24, r0
     6f6:	11 24       	eor	r1, r1
     6f8:	fc 01       	movw	r30, r24
     6fa:	eb 5a       	subi	r30, 0xAB	; 171
     6fc:	fd 4f       	sbci	r31, 0xFD	; 253
     6fe:	80 e1       	ldi	r24, 0x10	; 16
     700:	db 01       	movw	r26, r22
     702:	01 90       	ld	r0, Z+
     704:	0d 92       	st	X+, r0
     706:	8a 95       	dec	r24
     708:	e1 f7       	brne	.-8      	; 0x702 <Get_Message_FromMbox+0x12>
     70a:	08 95       	ret

0000070c <Get_MboxConfig>:
}

void Get_MboxConfig( MBox_type mail, CanMW_MBox * MboxConfig ){
    memcpy(MboxConfig,(void*)&MboxControlReg[mail],sizeof(CanMW_MBox));
     70c:	26 e1       	ldi	r18, 0x16	; 22
     70e:	82 9f       	mul	r24, r18
     710:	c0 01       	movw	r24, r0
     712:	11 24       	eor	r1, r1
     714:	fc 01       	movw	r30, r24
     716:	e1 5b       	subi	r30, 0xB1	; 177
     718:	fd 4f       	sbci	r31, 0xFD	; 253
     71a:	86 e1       	ldi	r24, 0x16	; 22
     71c:	db 01       	movw	r26, r22
     71e:	01 90       	ld	r0, Z+
     720:	0d 92       	st	X+, r0
     722:	8a 95       	dec	r24
     724:	e1 f7       	brne	.-8      	; 0x71e <Get_MboxConfig+0x12>
     726:	08 95       	ret

00000728 <Write_Message_Mbox>:
}

void Write_Message_Mbox(MBox_type mail,CanMW_MBox  * mail_box){
     728:	cf 93       	push	r28
     72a:	df 93       	push	r29
	sch_time_list time = SCH_INVALID;
	#if CAN_MIDLEWARE_SECURE_MAILBOX_WRITE == 1
	Can_Int_Transactions_Off();
     72c:	cb ed       	ldi	r28, 0xDB	; 219
     72e:	d0 e0       	ldi	r29, 0x00	; 0
     730:	98 81       	ld	r25, Y
     732:	9f 7d       	andi	r25, 0xDF	; 223
     734:	98 83       	st	Y, r25
     736:	98 81       	ld	r25, Y
     738:	9f 7e       	andi	r25, 0xEF	; 239
     73a:	98 83       	st	Y, r25
	#endif
	memcpy((void*)&MboxControlReg[mail],(void*)mail_box,sizeof(CanMW_MBox));
     73c:	26 e1       	ldi	r18, 0x16	; 22
     73e:	82 9f       	mul	r24, r18
     740:	c0 01       	movw	r24, r0
     742:	11 24       	eor	r1, r1
     744:	dc 01       	movw	r26, r24
     746:	a1 5b       	subi	r26, 0xB1	; 177
     748:	bd 4f       	sbci	r27, 0xFD	; 253
     74a:	86 e1       	ldi	r24, 0x16	; 22
     74c:	fb 01       	movw	r30, r22
     74e:	01 90       	ld	r0, Z+
     750:	0d 92       	st	X+, r0
     752:	8a 95       	dec	r24
     754:	e1 f7       	brne	.-8      	; 0x74e <Write_Message_Mbox+0x26>
		time = ( sch_time_list ) mail_box->msg.ttc_timmer;
	}
	schedulerSetupItem( mail, TRUE, time);
	#endif
	#if CAN_MIDLEWARE_SECURE_MAILBOX_WRITE == 1
	Can_Int_Transactions_On();
     756:	88 81       	ld	r24, Y
     758:	80 62       	ori	r24, 0x20	; 32
     75a:	88 83       	st	Y, r24
     75c:	88 81       	ld	r24, Y
     75e:	80 61       	ori	r24, 0x10	; 16
     760:	88 83       	st	Y, r24
	#endif
}
     762:	df 91       	pop	r29
     764:	cf 91       	pop	r28
     766:	08 95       	ret

00000768 <StatusCAN_Report_MCU>:
	USART_STATUS,
	MAILS_STADIS_L,
	MAILS_STADIS_H
}Mcu_Status;

void StatusCAN_Report_MCU(void){
     768:	cf 93       	push	r28
     76a:	df 93       	push	r29
     76c:	80 e0       	ldi	r24, 0x00	; 0
     76e:	90 e0       	ldi	r25, 0x00	; 0
   uint8_t iCounter;
   uint8_t Modo_internal=0;
   uint16_t MailBoxs_Status=0;
     770:	c0 e0       	ldi	r28, 0x00	; 0
     772:	d0 e0       	ldi	r29, 0x00	; 0
   for(iCounter=0;iCounter<=NUM_MAILBOXES;iCounter++){
	  Modo_internal =(MboxControlReg[iCounter].mode & 0x03);
     774:	66 e1       	ldi	r22, 0x16	; 22
     776:	68 9f       	mul	r22, r24
     778:	f0 01       	movw	r30, r0
     77a:	69 9f       	mul	r22, r25
     77c:	f0 0d       	add	r31, r0
     77e:	11 24       	eor	r1, r1
     780:	e1 5b       	subi	r30, 0xB1	; 177
     782:	fd 4f       	sbci	r31, 0xFD	; 253
     784:	21 81       	ldd	r18, Z+1	; 0x01
     786:	23 70       	andi	r18, 0x03	; 3
	  MailBoxs_Status+=(Modo_internal<<(2*iCounter));
     788:	30 e0       	ldi	r19, 0x00	; 0
     78a:	ac 01       	movw	r20, r24
     78c:	44 0f       	add	r20, r20
     78e:	55 1f       	adc	r21, r21
     790:	02 c0       	rjmp	.+4      	; 0x796 <StatusCAN_Report_MCU+0x2e>
     792:	22 0f       	add	r18, r18
     794:	33 1f       	adc	r19, r19
     796:	4a 95       	dec	r20
     798:	e2 f7       	brpl	.-8      	; 0x792 <StatusCAN_Report_MCU+0x2a>
     79a:	c2 0f       	add	r28, r18
     79c:	d3 1f       	adc	r29, r19
     79e:	01 96       	adiw	r24, 0x01	; 1

void StatusCAN_Report_MCU(void){
   uint8_t iCounter;
   uint8_t Modo_internal=0;
   uint16_t MailBoxs_Status=0;
   for(iCounter=0;iCounter<=NUM_MAILBOXES;iCounter++){
     7a0:	86 30       	cpi	r24, 0x06	; 6
     7a2:	91 05       	cpc	r25, r1
     7a4:	41 f7       	brne	.-48     	; 0x776 <StatusCAN_Report_MCU+0xe>
	  Modo_internal =(MboxControlReg[iCounter].mode & 0x03);
	  MailBoxs_Status+=(Modo_internal<<(2*iCounter));
    }
	MboxControlReg[ServiceMail_Message_Box].msg.data[RX_CAN_ERROR]=Get_CAN_Rx_error();
     7a6:	3c de       	rcall	.-904    	; 0x420 <Get_CAN_Rx_error>
     7a8:	80 93 c6 02 	sts	0x02C6, r24
	MboxControlReg[ServiceMail_Message_Box].msg.data[TX_CAN_ERROR]=Get_CAN_Tx_error();
     7ac:	36 de       	rcall	.-916    	; 0x41a <Get_CAN_Tx_error>
     7ae:	80 93 c7 02 	sts	0x02C7, r24
	MboxControlReg[ServiceMail_Message_Box].msg.data[CAN_GENERAL_STATUS]=CANGSTA;
     7b2:	80 91 d9 00 	lds	r24, 0x00D9
     7b6:	80 93 c8 02 	sts	0x02C8, r24
	MboxControlReg[ServiceMail_Message_Box].msg.data[USART_STATUS]=UCSR0A;
     7ba:	80 91 c0 00 	lds	r24, 0x00C0
     7be:	80 93 c9 02 	sts	0x02C9, r24
	MboxControlReg[ServiceMail_Message_Box].msg.data[MAILS_STADIS_L]=(uint8_t)(MailBoxs_Status & 0x00FF);
     7c2:	c0 93 ca 02 	sts	0x02CA, r28
	MboxControlReg[ServiceMail_Message_Box].msg.data[MAILS_STADIS_H]=(uint8_t)(MailBoxs_Status >> 8);
     7c6:	d0 93 cb 02 	sts	0x02CB, r29
}
     7ca:	df 91       	pop	r29
     7cc:	cf 91       	pop	r28
     7ce:	08 95       	ret

000007d0 <CAN_Main_Board_Init>:
#include <twi_at90can128.h>
/*******************************************************************************************/
/*    M A C R O S                                                                          */
/*******************************************************************************************/
void CAN_Main_Board_Init(void){
	watchdog_on(WDT_TIME_2_1S);
     7d0:	87 e0       	ldi	r24, 0x07	; 7
     7d2:	99 d7       	rcall	.+3890   	; 0x1706 <watchdog_on>
    //Here enable UART
    usart_init(BAUD_RATE_28_8k);
    usart_enable_interrupts( );
#else
    //Here enable TWI
    twiAt90can128Init( FALSE, TWIADDR, TWBR_VALUE, TWPS_VALUE );
     7d4:	20 e0       	ldi	r18, 0x00	; 0
     7d6:	48 e4       	ldi	r20, 0x48	; 72
     7d8:	69 e3       	ldi	r22, 0x39	; 57
     7da:	80 e0       	ldi	r24, 0x00	; 0
     7dc:	66 d4       	rcall	.+2252   	; 0x10aa <twiAt90can128Init>
    twiAt90can128EnableInterrupt( TRUE );
     7de:	81 e0       	ldi	r24, 0x01	; 1
     7e0:	85 d4       	rcall	.+2314   	; 0x10ec <twiAt90can128EnableInterrupt>
#endif
	Led_Indicators_Init();
     7e2:	02 d0       	rcall	.+4      	; 0x7e8 <Led_Indicators_Init>
	asm("NOP");
     7e4:	00 00       	nop
     7e6:	08 95       	ret

000007e8 <Led_Indicators_Init>:
	switch (state) {
	case LED_INDICATOR_ON:
		IndSet_On(LED_RX_PORT,LED_RX_PIN);
		break;
	case LED_INDICATOR_OFF:
		IndSet_Off(LED_RX_PORT,LED_RX_PIN);
     7e8:	0d 9a       	sbi	0x01, 5	; 1
     7ea:	15 9a       	sbi	0x02, 5	; 2
     7ec:	0f 9a       	sbi	0x01, 7	; 1
     7ee:	17 9a       	sbi	0x02, 7	; 2
     7f0:	0e 9a       	sbi	0x01, 6	; 1
     7f2:	16 9a       	sbi	0x02, 6	; 2
     7f4:	08 95       	ret

000007f6 <Led_Err>:
		break;
	}
}

void Led_Err(uint8_t state){
	Ind_led.can_err_led_indicator=state;
     7f6:	80 93 d8 02 	sts	0x02D8, r24
	switch (state) {
     7fa:	88 23       	and	r24, r24
     7fc:	19 f0       	breq	.+6      	; 0x804 <Led_Err+0xe>
     7fe:	81 30       	cpi	r24, 0x01	; 1
     800:	19 f0       	breq	.+6      	; 0x808 <Led_Err+0x12>
     802:	08 95       	ret
	case LED_INDICATOR_ON:
		IndSet_On(LED_Err_PORT,LED_Err_PIN);
     804:	15 98       	cbi	0x02, 5	; 2
		break;
     806:	08 95       	ret
	case LED_INDICATOR_OFF:
		IndSet_Off(LED_Err_PORT,LED_Err_PIN);
     808:	15 9a       	sbi	0x02, 5	; 2
     80a:	08 95       	ret

0000080c <main>:
/*******************************************************************************************/
/*    F U N C T I O N   P R O T O T Y P E S                                                */
/*******************************************************************************************/
int  main(void){

	CAN_Main_Board_Init();
     80c:	e1 df       	rcall	.-62     	; 0x7d0 <CAN_Main_Board_Init>
	Can_App_Init();
     80e:	55 dd       	rcall	.-1366   	; 0x2ba <Can_App_Init>
	ENABLE_ALL_INTERRUPTS();
     810:	eb ed       	ldi	r30, 0xDB	; 219
     812:	f0 e0       	ldi	r31, 0x00	; 0
     814:	80 81       	ld	r24, Z
     816:	80 68       	ori	r24, 0x80	; 128
     818:	80 83       	st	Z, r24
	can_ctrl_enable_controller();
     81a:	e8 ed       	ldi	r30, 0xD8	; 216
     81c:	f0 e0       	ldi	r31, 0x00	; 0
     81e:	80 81       	ld	r24, Z
     820:	82 60       	ori	r24, 0x02	; 2
     822:	80 83       	st	Z, r24
	schedulerInit( );
     824:	7a d3       	rcall	.+1780   	; 0xf1a <schedulerInit>
	sei();
     826:	78 94       	sei
 	while(1){
	      schedulerEventHandler();
     828:	8c d3       	rcall	.+1816   	; 0xf42 <schedulerEventHandler>
	      Can_App_IDLE_Hook();
     82a:	af dd       	rcall	.-1186   	; 0x38a <Can_App_IDLE_Hook>

		watchdog_reset( );
     82c:	6a d7       	rcall	.+3796   	; 0x1702 <watchdog_reset>
     82e:	fc cf       	rjmp	.-8      	; 0x828 <main+0x1c>

00000830 <timeout_callback_Mailbox0>:
 * \fn      void timeout_callback_Mailbox0( void )
 * \brief
 * \return
 *****************************************************************************/
void timeout_callback_Mailbox0( void )
{
     830:	cf 93       	push	r28
     832:	df 93       	push	r29
     834:	cd b7       	in	r28, 0x3d	; 61
     836:	de b7       	in	r29, 0x3e	; 62
     838:	66 97       	sbiw	r28, 0x16	; 22
     83a:	0f b6       	in	r0, 0x3f	; 63
     83c:	f8 94       	cli
     83e:	de bf       	out	0x3e, r29	; 62
     840:	0f be       	out	0x3f, r0	; 63
     842:	cd bf       	out	0x3d, r28	; 61
	CanMW_MBox MboxCfg;
	Get_MboxConfig( 0, &MboxCfg );
     844:	be 01       	movw	r22, r28
     846:	6f 5f       	subi	r22, 0xFF	; 255
     848:	7f 4f       	sbci	r23, 0xFF	; 255
     84a:	80 e0       	ldi	r24, 0x00	; 0
     84c:	5f df       	rcall	.-322    	; 0x70c <Get_MboxConfig>
	MboxCfg.msg.ttc_timmer = SCH_INVALID;
     84e:	1e 8a       	std	Y+22, r1	; 0x16
     850:	1d 8a       	std	Y+21, r1	; 0x15
	Write_Message_Mbox(0, &MboxCfg);
     852:	be 01       	movw	r22, r28
     854:	6f 5f       	subi	r22, 0xFF	; 255
     856:	7f 4f       	sbci	r23, 0xFF	; 255
     858:	80 e0       	ldi	r24, 0x00	; 0
     85a:	66 df       	rcall	.-308    	; 0x728 <Write_Message_Mbox>
	return;
}
     85c:	66 96       	adiw	r28, 0x16	; 22
     85e:	0f b6       	in	r0, 0x3f	; 63
     860:	f8 94       	cli
     862:	de bf       	out	0x3e, r29	; 62
     864:	0f be       	out	0x3f, r0	; 63
     866:	cd bf       	out	0x3d, r28	; 61
     868:	df 91       	pop	r29
     86a:	cf 91       	pop	r28
     86c:	08 95       	ret

0000086e <timeout_callback_Mailbox1>:
 * \fn      void timeout_callback_Mailbox1( void )
 * \brief
 * \return
 *****************************************************************************/
void timeout_callback_Mailbox1( void )
{
     86e:	cf 93       	push	r28
     870:	df 93       	push	r29
     872:	cd b7       	in	r28, 0x3d	; 61
     874:	de b7       	in	r29, 0x3e	; 62
     876:	66 97       	sbiw	r28, 0x16	; 22
     878:	0f b6       	in	r0, 0x3f	; 63
     87a:	f8 94       	cli
     87c:	de bf       	out	0x3e, r29	; 62
     87e:	0f be       	out	0x3f, r0	; 63
     880:	cd bf       	out	0x3d, r28	; 61
	CanMW_MBox MboxCfg;
	Get_MboxConfig( 1, &MboxCfg );
     882:	be 01       	movw	r22, r28
     884:	6f 5f       	subi	r22, 0xFF	; 255
     886:	7f 4f       	sbci	r23, 0xFF	; 255
     888:	81 e0       	ldi	r24, 0x01	; 1
     88a:	40 df       	rcall	.-384    	; 0x70c <Get_MboxConfig>
	MboxCfg.msg.ttc_timmer = SCH_INVALID;
     88c:	1e 8a       	std	Y+22, r1	; 0x16
     88e:	1d 8a       	std	Y+21, r1	; 0x15
	Write_Message_Mbox( 1, &MboxCfg );
     890:	be 01       	movw	r22, r28
     892:	6f 5f       	subi	r22, 0xFF	; 255
     894:	7f 4f       	sbci	r23, 0xFF	; 255
     896:	81 e0       	ldi	r24, 0x01	; 1
     898:	47 df       	rcall	.-370    	; 0x728 <Write_Message_Mbox>
	return;
}
     89a:	66 96       	adiw	r28, 0x16	; 22
     89c:	0f b6       	in	r0, 0x3f	; 63
     89e:	f8 94       	cli
     8a0:	de bf       	out	0x3e, r29	; 62
     8a2:	0f be       	out	0x3f, r0	; 63
     8a4:	cd bf       	out	0x3d, r28	; 61
     8a6:	df 91       	pop	r29
     8a8:	cf 91       	pop	r28
     8aa:	08 95       	ret

000008ac <timeout_callback_Mailbox2>:
 * \fn      void timeout_callback_Mailbox2( void )
 * \brief
 * \return
 *****************************************************************************/
void timeout_callback_Mailbox2( void )
{
     8ac:	cf 93       	push	r28
     8ae:	df 93       	push	r29
     8b0:	cd b7       	in	r28, 0x3d	; 61
     8b2:	de b7       	in	r29, 0x3e	; 62
     8b4:	66 97       	sbiw	r28, 0x16	; 22
     8b6:	0f b6       	in	r0, 0x3f	; 63
     8b8:	f8 94       	cli
     8ba:	de bf       	out	0x3e, r29	; 62
     8bc:	0f be       	out	0x3f, r0	; 63
     8be:	cd bf       	out	0x3d, r28	; 61
	CanMW_MBox MboxCfg;
	Get_MboxConfig( 2, &MboxCfg );
     8c0:	be 01       	movw	r22, r28
     8c2:	6f 5f       	subi	r22, 0xFF	; 255
     8c4:	7f 4f       	sbci	r23, 0xFF	; 255
     8c6:	82 e0       	ldi	r24, 0x02	; 2
     8c8:	21 df       	rcall	.-446    	; 0x70c <Get_MboxConfig>
	MboxCfg.msg.ttc_timmer = SCH_INVALID;
     8ca:	1e 8a       	std	Y+22, r1	; 0x16
     8cc:	1d 8a       	std	Y+21, r1	; 0x15
	Write_Message_Mbox( 2, &MboxCfg );
     8ce:	be 01       	movw	r22, r28
     8d0:	6f 5f       	subi	r22, 0xFF	; 255
     8d2:	7f 4f       	sbci	r23, 0xFF	; 255
     8d4:	82 e0       	ldi	r24, 0x02	; 2
     8d6:	28 df       	rcall	.-432    	; 0x728 <Write_Message_Mbox>
	return;
}
     8d8:	66 96       	adiw	r28, 0x16	; 22
     8da:	0f b6       	in	r0, 0x3f	; 63
     8dc:	f8 94       	cli
     8de:	de bf       	out	0x3e, r29	; 62
     8e0:	0f be       	out	0x3f, r0	; 63
     8e2:	cd bf       	out	0x3d, r28	; 61
     8e4:	df 91       	pop	r29
     8e6:	cf 91       	pop	r28
     8e8:	08 95       	ret

000008ea <timeout_callback_Mailbox3>:
 * \fn      void timeout_callback_Mailbox3( void )
 * \brief
 * \return
 *****************************************************************************/
void timeout_callback_Mailbox3( void )
{
     8ea:	cf 93       	push	r28
     8ec:	df 93       	push	r29
     8ee:	cd b7       	in	r28, 0x3d	; 61
     8f0:	de b7       	in	r29, 0x3e	; 62
     8f2:	66 97       	sbiw	r28, 0x16	; 22
     8f4:	0f b6       	in	r0, 0x3f	; 63
     8f6:	f8 94       	cli
     8f8:	de bf       	out	0x3e, r29	; 62
     8fa:	0f be       	out	0x3f, r0	; 63
     8fc:	cd bf       	out	0x3d, r28	; 61
	CanMW_MBox MboxCfg;
	Get_MboxConfig( 3, &MboxCfg );
     8fe:	be 01       	movw	r22, r28
     900:	6f 5f       	subi	r22, 0xFF	; 255
     902:	7f 4f       	sbci	r23, 0xFF	; 255
     904:	83 e0       	ldi	r24, 0x03	; 3
     906:	02 df       	rcall	.-508    	; 0x70c <Get_MboxConfig>
	MboxCfg.msg.ttc_timmer = SCH_INVALID;
     908:	1e 8a       	std	Y+22, r1	; 0x16
     90a:	1d 8a       	std	Y+21, r1	; 0x15
	Write_Message_Mbox( 3, &MboxCfg);
     90c:	be 01       	movw	r22, r28
     90e:	6f 5f       	subi	r22, 0xFF	; 255
     910:	7f 4f       	sbci	r23, 0xFF	; 255
     912:	83 e0       	ldi	r24, 0x03	; 3
     914:	09 df       	rcall	.-494    	; 0x728 <Write_Message_Mbox>
	return;
}
     916:	66 96       	adiw	r28, 0x16	; 22
     918:	0f b6       	in	r0, 0x3f	; 63
     91a:	f8 94       	cli
     91c:	de bf       	out	0x3e, r29	; 62
     91e:	0f be       	out	0x3f, r0	; 63
     920:	cd bf       	out	0x3d, r28	; 61
     922:	df 91       	pop	r29
     924:	cf 91       	pop	r28
     926:	08 95       	ret

00000928 <timeout_callback_Mailbox4>:
 * \fn      void timeout_callback_Mailbox4( void )
 * \brief
 * \return
 *****************************************************************************/
void timeout_callback_Mailbox4( void )
{
     928:	cf 93       	push	r28
     92a:	df 93       	push	r29
     92c:	cd b7       	in	r28, 0x3d	; 61
     92e:	de b7       	in	r29, 0x3e	; 62
     930:	66 97       	sbiw	r28, 0x16	; 22
     932:	0f b6       	in	r0, 0x3f	; 63
     934:	f8 94       	cli
     936:	de bf       	out	0x3e, r29	; 62
     938:	0f be       	out	0x3f, r0	; 63
     93a:	cd bf       	out	0x3d, r28	; 61
	CanMW_MBox MboxCfg;
	Get_MboxConfig( 4, &MboxCfg );
     93c:	be 01       	movw	r22, r28
     93e:	6f 5f       	subi	r22, 0xFF	; 255
     940:	7f 4f       	sbci	r23, 0xFF	; 255
     942:	84 e0       	ldi	r24, 0x04	; 4
     944:	e3 de       	rcall	.-570    	; 0x70c <Get_MboxConfig>
	MboxCfg.msg.ttc_timmer = SCH_INVALID;
     946:	1e 8a       	std	Y+22, r1	; 0x16
     948:	1d 8a       	std	Y+21, r1	; 0x15
	Write_Message_Mbox( 4, &MboxCfg);
     94a:	be 01       	movw	r22, r28
     94c:	6f 5f       	subi	r22, 0xFF	; 255
     94e:	7f 4f       	sbci	r23, 0xFF	; 255
     950:	84 e0       	ldi	r24, 0x04	; 4
     952:	ea de       	rcall	.-556    	; 0x728 <Write_Message_Mbox>
	return;
}
     954:	66 96       	adiw	r28, 0x16	; 22
     956:	0f b6       	in	r0, 0x3f	; 63
     958:	f8 94       	cli
     95a:	de bf       	out	0x3e, r29	; 62
     95c:	0f be       	out	0x3f, r0	; 63
     95e:	cd bf       	out	0x3d, r28	; 61
     960:	df 91       	pop	r29
     962:	cf 91       	pop	r28
     964:	08 95       	ret

00000966 <timeout_callback_Mailbox5>:
 * \fn      void timeout_callback_Mailbox5( void )
 * \brief
 * \return
 *****************************************************************************/
void timeout_callback_Mailbox5( void )
{
     966:	cf 93       	push	r28
     968:	df 93       	push	r29
     96a:	cd b7       	in	r28, 0x3d	; 61
     96c:	de b7       	in	r29, 0x3e	; 62
     96e:	66 97       	sbiw	r28, 0x16	; 22
     970:	0f b6       	in	r0, 0x3f	; 63
     972:	f8 94       	cli
     974:	de bf       	out	0x3e, r29	; 62
     976:	0f be       	out	0x3f, r0	; 63
     978:	cd bf       	out	0x3d, r28	; 61
	CanMW_MBox MboxCfg;
	Get_MboxConfig( 5, &MboxCfg );
     97a:	be 01       	movw	r22, r28
     97c:	6f 5f       	subi	r22, 0xFF	; 255
     97e:	7f 4f       	sbci	r23, 0xFF	; 255
     980:	85 e0       	ldi	r24, 0x05	; 5
     982:	c4 de       	rcall	.-632    	; 0x70c <Get_MboxConfig>
	MboxCfg.msg.ttc_timmer = SCH_INVALID;
     984:	1e 8a       	std	Y+22, r1	; 0x16
     986:	1d 8a       	std	Y+21, r1	; 0x15
	Write_Message_Mbox(5, &MboxCfg);
     988:	be 01       	movw	r22, r28
     98a:	6f 5f       	subi	r22, 0xFF	; 255
     98c:	7f 4f       	sbci	r23, 0xFF	; 255
     98e:	85 e0       	ldi	r24, 0x05	; 5
     990:	cb de       	rcall	.-618    	; 0x728 <Write_Message_Mbox>
	return;
}
     992:	66 96       	adiw	r28, 0x16	; 22
     994:	0f b6       	in	r0, 0x3f	; 63
     996:	f8 94       	cli
     998:	de bf       	out	0x3e, r29	; 62
     99a:	0f be       	out	0x3f, r0	; 63
     99c:	cd bf       	out	0x3d, r28	; 61
     99e:	df 91       	pop	r29
     9a0:	cf 91       	pop	r28
     9a2:	08 95       	ret

000009a4 <timeout_callback_Mailbox6>:
 * \fn      void timeout_callback_Mailbox6( void )
 * \brief
 * \return
 *****************************************************************************/
void timeout_callback_Mailbox6( void )
{
     9a4:	cf 93       	push	r28
     9a6:	df 93       	push	r29
     9a8:	cd b7       	in	r28, 0x3d	; 61
     9aa:	de b7       	in	r29, 0x3e	; 62
     9ac:	66 97       	sbiw	r28, 0x16	; 22
     9ae:	0f b6       	in	r0, 0x3f	; 63
     9b0:	f8 94       	cli
     9b2:	de bf       	out	0x3e, r29	; 62
     9b4:	0f be       	out	0x3f, r0	; 63
     9b6:	cd bf       	out	0x3d, r28	; 61
	CanMW_MBox MboxCfg;
	Get_MboxConfig( 6, &MboxCfg );
     9b8:	be 01       	movw	r22, r28
     9ba:	6f 5f       	subi	r22, 0xFF	; 255
     9bc:	7f 4f       	sbci	r23, 0xFF	; 255
     9be:	86 e0       	ldi	r24, 0x06	; 6
     9c0:	a5 de       	rcall	.-694    	; 0x70c <Get_MboxConfig>
	MboxCfg.msg.ttc_timmer = SCH_INVALID;
     9c2:	1e 8a       	std	Y+22, r1	; 0x16
     9c4:	1d 8a       	std	Y+21, r1	; 0x15
	Write_Message_Mbox( 6, &MboxCfg);
     9c6:	be 01       	movw	r22, r28
     9c8:	6f 5f       	subi	r22, 0xFF	; 255
     9ca:	7f 4f       	sbci	r23, 0xFF	; 255
     9cc:	86 e0       	ldi	r24, 0x06	; 6
     9ce:	ac de       	rcall	.-680    	; 0x728 <Write_Message_Mbox>
	return;
}
     9d0:	66 96       	adiw	r28, 0x16	; 22
     9d2:	0f b6       	in	r0, 0x3f	; 63
     9d4:	f8 94       	cli
     9d6:	de bf       	out	0x3e, r29	; 62
     9d8:	0f be       	out	0x3f, r0	; 63
     9da:	cd bf       	out	0x3d, r28	; 61
     9dc:	df 91       	pop	r29
     9de:	cf 91       	pop	r28
     9e0:	08 95       	ret

000009e2 <timeout_callback_Mailbox7>:
 * \fn      void timeout_callback_Mailbox7( void )
 * \brief
 * \return
 *****************************************************************************/
void timeout_callback_Mailbox7( void )
{
     9e2:	cf 93       	push	r28
     9e4:	df 93       	push	r29
     9e6:	cd b7       	in	r28, 0x3d	; 61
     9e8:	de b7       	in	r29, 0x3e	; 62
     9ea:	66 97       	sbiw	r28, 0x16	; 22
     9ec:	0f b6       	in	r0, 0x3f	; 63
     9ee:	f8 94       	cli
     9f0:	de bf       	out	0x3e, r29	; 62
     9f2:	0f be       	out	0x3f, r0	; 63
     9f4:	cd bf       	out	0x3d, r28	; 61
	CanMW_MBox MboxCfg;
	Get_MboxConfig( 7, &MboxCfg );
     9f6:	be 01       	movw	r22, r28
     9f8:	6f 5f       	subi	r22, 0xFF	; 255
     9fa:	7f 4f       	sbci	r23, 0xFF	; 255
     9fc:	87 e0       	ldi	r24, 0x07	; 7
     9fe:	86 de       	rcall	.-756    	; 0x70c <Get_MboxConfig>
	MboxCfg.msg.ttc_timmer = SCH_INVALID;
     a00:	1e 8a       	std	Y+22, r1	; 0x16
     a02:	1d 8a       	std	Y+21, r1	; 0x15
	Write_Message_Mbox( 7, &MboxCfg);
     a04:	be 01       	movw	r22, r28
     a06:	6f 5f       	subi	r22, 0xFF	; 255
     a08:	7f 4f       	sbci	r23, 0xFF	; 255
     a0a:	87 e0       	ldi	r24, 0x07	; 7
     a0c:	8d de       	rcall	.-742    	; 0x728 <Write_Message_Mbox>
	return;
}
     a0e:	66 96       	adiw	r28, 0x16	; 22
     a10:	0f b6       	in	r0, 0x3f	; 63
     a12:	f8 94       	cli
     a14:	de bf       	out	0x3e, r29	; 62
     a16:	0f be       	out	0x3f, r0	; 63
     a18:	cd bf       	out	0x3d, r28	; 61
     a1a:	df 91       	pop	r29
     a1c:	cf 91       	pop	r28
     a1e:	08 95       	ret

00000a20 <timeout_callback_Mailbox8>:
 * \fn      void timeout_callback_Mailbox8( void )
 * \brief
 * \return
 *****************************************************************************/
void timeout_callback_Mailbox8( void )
{
     a20:	cf 93       	push	r28
     a22:	df 93       	push	r29
     a24:	cd b7       	in	r28, 0x3d	; 61
     a26:	de b7       	in	r29, 0x3e	; 62
     a28:	66 97       	sbiw	r28, 0x16	; 22
     a2a:	0f b6       	in	r0, 0x3f	; 63
     a2c:	f8 94       	cli
     a2e:	de bf       	out	0x3e, r29	; 62
     a30:	0f be       	out	0x3f, r0	; 63
     a32:	cd bf       	out	0x3d, r28	; 61
	CanMW_MBox MboxCfg;
	Get_MboxConfig( 8, &MboxCfg );
     a34:	be 01       	movw	r22, r28
     a36:	6f 5f       	subi	r22, 0xFF	; 255
     a38:	7f 4f       	sbci	r23, 0xFF	; 255
     a3a:	88 e0       	ldi	r24, 0x08	; 8
     a3c:	67 de       	rcall	.-818    	; 0x70c <Get_MboxConfig>
	MboxCfg.msg.ttc_timmer = SCH_INVALID;
     a3e:	1e 8a       	std	Y+22, r1	; 0x16
     a40:	1d 8a       	std	Y+21, r1	; 0x15
	Write_Message_Mbox( 8, &MboxCfg);
     a42:	be 01       	movw	r22, r28
     a44:	6f 5f       	subi	r22, 0xFF	; 255
     a46:	7f 4f       	sbci	r23, 0xFF	; 255
     a48:	88 e0       	ldi	r24, 0x08	; 8
     a4a:	6e de       	rcall	.-804    	; 0x728 <Write_Message_Mbox>
	return;
}
     a4c:	66 96       	adiw	r28, 0x16	; 22
     a4e:	0f b6       	in	r0, 0x3f	; 63
     a50:	f8 94       	cli
     a52:	de bf       	out	0x3e, r29	; 62
     a54:	0f be       	out	0x3f, r0	; 63
     a56:	cd bf       	out	0x3d, r28	; 61
     a58:	df 91       	pop	r29
     a5a:	cf 91       	pop	r28
     a5c:	08 95       	ret

00000a5e <timeout_callback_Mailbox9>:
 * \fn      void timeout_callback_Mailbox9( void )
 * \brief
 * \return
 *****************************************************************************/
void timeout_callback_Mailbox9( void )
{
     a5e:	cf 93       	push	r28
     a60:	df 93       	push	r29
     a62:	cd b7       	in	r28, 0x3d	; 61
     a64:	de b7       	in	r29, 0x3e	; 62
     a66:	66 97       	sbiw	r28, 0x16	; 22
     a68:	0f b6       	in	r0, 0x3f	; 63
     a6a:	f8 94       	cli
     a6c:	de bf       	out	0x3e, r29	; 62
     a6e:	0f be       	out	0x3f, r0	; 63
     a70:	cd bf       	out	0x3d, r28	; 61
	CanMW_MBox MboxCfg;
	Get_MboxConfig( 9, &MboxCfg );
     a72:	be 01       	movw	r22, r28
     a74:	6f 5f       	subi	r22, 0xFF	; 255
     a76:	7f 4f       	sbci	r23, 0xFF	; 255
     a78:	89 e0       	ldi	r24, 0x09	; 9
     a7a:	48 de       	rcall	.-880    	; 0x70c <Get_MboxConfig>
	MboxCfg.msg.ttc_timmer = SCH_INVALID;
     a7c:	1e 8a       	std	Y+22, r1	; 0x16
     a7e:	1d 8a       	std	Y+21, r1	; 0x15
	Write_Message_Mbox( 9, &MboxCfg);
     a80:	be 01       	movw	r22, r28
     a82:	6f 5f       	subi	r22, 0xFF	; 255
     a84:	7f 4f       	sbci	r23, 0xFF	; 255
     a86:	89 e0       	ldi	r24, 0x09	; 9
     a88:	4f de       	rcall	.-866    	; 0x728 <Write_Message_Mbox>
	return;
}
     a8a:	66 96       	adiw	r28, 0x16	; 22
     a8c:	0f b6       	in	r0, 0x3f	; 63
     a8e:	f8 94       	cli
     a90:	de bf       	out	0x3e, r29	; 62
     a92:	0f be       	out	0x3f, r0	; 63
     a94:	cd bf       	out	0x3d, r28	; 61
     a96:	df 91       	pop	r29
     a98:	cf 91       	pop	r28
     a9a:	08 95       	ret

00000a9c <timeout_callback_Mailbox10>:
 * \brief
 * \return
 *****************************************************************************/
void timeout_callback_Mailbox10( void )

{
     a9c:	cf 93       	push	r28
     a9e:	df 93       	push	r29
     aa0:	cd b7       	in	r28, 0x3d	; 61
     aa2:	de b7       	in	r29, 0x3e	; 62
     aa4:	66 97       	sbiw	r28, 0x16	; 22
     aa6:	0f b6       	in	r0, 0x3f	; 63
     aa8:	f8 94       	cli
     aaa:	de bf       	out	0x3e, r29	; 62
     aac:	0f be       	out	0x3f, r0	; 63
     aae:	cd bf       	out	0x3d, r28	; 61
	CanMW_MBox MboxCfg;
	Get_MboxConfig( 10, &MboxCfg );
     ab0:	be 01       	movw	r22, r28
     ab2:	6f 5f       	subi	r22, 0xFF	; 255
     ab4:	7f 4f       	sbci	r23, 0xFF	; 255
     ab6:	8a e0       	ldi	r24, 0x0A	; 10
     ab8:	29 de       	rcall	.-942    	; 0x70c <Get_MboxConfig>
	MboxCfg.msg.ttc_timmer = SCH_INVALID;
     aba:	1e 8a       	std	Y+22, r1	; 0x16
     abc:	1d 8a       	std	Y+21, r1	; 0x15
	Write_Message_Mbox( 10, &MboxCfg);
     abe:	be 01       	movw	r22, r28
     ac0:	6f 5f       	subi	r22, 0xFF	; 255
     ac2:	7f 4f       	sbci	r23, 0xFF	; 255
     ac4:	8a e0       	ldi	r24, 0x0A	; 10
     ac6:	30 de       	rcall	.-928    	; 0x728 <Write_Message_Mbox>
	return;
}
     ac8:	66 96       	adiw	r28, 0x16	; 22
     aca:	0f b6       	in	r0, 0x3f	; 63
     acc:	f8 94       	cli
     ace:	de bf       	out	0x3e, r29	; 62
     ad0:	0f be       	out	0x3f, r0	; 63
     ad2:	cd bf       	out	0x3d, r28	; 61
     ad4:	df 91       	pop	r29
     ad6:	cf 91       	pop	r28
     ad8:	08 95       	ret

00000ada <timeout_callback_Mailbox11>:
 * \fn      void timeout_callback_Mailbox11( void )
 * \brief
 * \return
 *****************************************************************************/
void timeout_callback_Mailbox11( void )
{
     ada:	cf 93       	push	r28
     adc:	df 93       	push	r29
     ade:	cd b7       	in	r28, 0x3d	; 61
     ae0:	de b7       	in	r29, 0x3e	; 62
     ae2:	66 97       	sbiw	r28, 0x16	; 22
     ae4:	0f b6       	in	r0, 0x3f	; 63
     ae6:	f8 94       	cli
     ae8:	de bf       	out	0x3e, r29	; 62
     aea:	0f be       	out	0x3f, r0	; 63
     aec:	cd bf       	out	0x3d, r28	; 61
	CanMW_MBox MboxCfg;
	Get_MboxConfig( 11, &MboxCfg );
     aee:	be 01       	movw	r22, r28
     af0:	6f 5f       	subi	r22, 0xFF	; 255
     af2:	7f 4f       	sbci	r23, 0xFF	; 255
     af4:	8b e0       	ldi	r24, 0x0B	; 11
     af6:	0a de       	rcall	.-1004   	; 0x70c <Get_MboxConfig>
	MboxCfg.msg.ttc_timmer = SCH_INVALID;
     af8:	1e 8a       	std	Y+22, r1	; 0x16
     afa:	1d 8a       	std	Y+21, r1	; 0x15
	Write_Message_Mbox( 11, &MboxCfg);
     afc:	be 01       	movw	r22, r28
     afe:	6f 5f       	subi	r22, 0xFF	; 255
     b00:	7f 4f       	sbci	r23, 0xFF	; 255
     b02:	8b e0       	ldi	r24, 0x0B	; 11
     b04:	11 de       	rcall	.-990    	; 0x728 <Write_Message_Mbox>
	return;
}
     b06:	66 96       	adiw	r28, 0x16	; 22
     b08:	0f b6       	in	r0, 0x3f	; 63
     b0a:	f8 94       	cli
     b0c:	de bf       	out	0x3e, r29	; 62
     b0e:	0f be       	out	0x3f, r0	; 63
     b10:	cd bf       	out	0x3d, r28	; 61
     b12:	df 91       	pop	r29
     b14:	cf 91       	pop	r28
     b16:	08 95       	ret

00000b18 <timeout_callback_Mailbox12>:
 * \fn      void timeout_callback_Mailbox12( void )
 * \brief
 * \return
 *****************************************************************************/
void timeout_callback_Mailbox12( void )
{
     b18:	cf 93       	push	r28
     b1a:	df 93       	push	r29
     b1c:	cd b7       	in	r28, 0x3d	; 61
     b1e:	de b7       	in	r29, 0x3e	; 62
     b20:	66 97       	sbiw	r28, 0x16	; 22
     b22:	0f b6       	in	r0, 0x3f	; 63
     b24:	f8 94       	cli
     b26:	de bf       	out	0x3e, r29	; 62
     b28:	0f be       	out	0x3f, r0	; 63
     b2a:	cd bf       	out	0x3d, r28	; 61
	CanMW_MBox MboxCfg;
	Get_MboxConfig( 12, &MboxCfg );
     b2c:	be 01       	movw	r22, r28
     b2e:	6f 5f       	subi	r22, 0xFF	; 255
     b30:	7f 4f       	sbci	r23, 0xFF	; 255
     b32:	8c e0       	ldi	r24, 0x0C	; 12
     b34:	eb dd       	rcall	.-1066   	; 0x70c <Get_MboxConfig>
	MboxCfg.msg.ttc_timmer = SCH_INVALID;
     b36:	1e 8a       	std	Y+22, r1	; 0x16
     b38:	1d 8a       	std	Y+21, r1	; 0x15
	Write_Message_Mbox( 12, &MboxCfg);
     b3a:	be 01       	movw	r22, r28
     b3c:	6f 5f       	subi	r22, 0xFF	; 255
     b3e:	7f 4f       	sbci	r23, 0xFF	; 255
     b40:	8c e0       	ldi	r24, 0x0C	; 12
     b42:	f2 dd       	rcall	.-1052   	; 0x728 <Write_Message_Mbox>
	return;
}
     b44:	66 96       	adiw	r28, 0x16	; 22
     b46:	0f b6       	in	r0, 0x3f	; 63
     b48:	f8 94       	cli
     b4a:	de bf       	out	0x3e, r29	; 62
     b4c:	0f be       	out	0x3f, r0	; 63
     b4e:	cd bf       	out	0x3d, r28	; 61
     b50:	df 91       	pop	r29
     b52:	cf 91       	pop	r28
     b54:	08 95       	ret

00000b56 <timeout_callback_Mailbox13>:
 * \fn      void timeout_callback_Mailbox13( void )
 * \brief
 * \return
 *****************************************************************************/
void timeout_callback_Mailbox13( void )
{
     b56:	cf 93       	push	r28
     b58:	df 93       	push	r29
     b5a:	cd b7       	in	r28, 0x3d	; 61
     b5c:	de b7       	in	r29, 0x3e	; 62
     b5e:	66 97       	sbiw	r28, 0x16	; 22
     b60:	0f b6       	in	r0, 0x3f	; 63
     b62:	f8 94       	cli
     b64:	de bf       	out	0x3e, r29	; 62
     b66:	0f be       	out	0x3f, r0	; 63
     b68:	cd bf       	out	0x3d, r28	; 61
	CanMW_MBox MboxCfg;
	Get_MboxConfig( 13, &MboxCfg );
     b6a:	be 01       	movw	r22, r28
     b6c:	6f 5f       	subi	r22, 0xFF	; 255
     b6e:	7f 4f       	sbci	r23, 0xFF	; 255
     b70:	8d e0       	ldi	r24, 0x0D	; 13
     b72:	cc dd       	rcall	.-1128   	; 0x70c <Get_MboxConfig>
	MboxCfg.msg.ttc_timmer = SCH_INVALID;
     b74:	1e 8a       	std	Y+22, r1	; 0x16
     b76:	1d 8a       	std	Y+21, r1	; 0x15
	Write_Message_Mbox( 13, &MboxCfg);
     b78:	be 01       	movw	r22, r28
     b7a:	6f 5f       	subi	r22, 0xFF	; 255
     b7c:	7f 4f       	sbci	r23, 0xFF	; 255
     b7e:	8d e0       	ldi	r24, 0x0D	; 13
     b80:	d3 dd       	rcall	.-1114   	; 0x728 <Write_Message_Mbox>
	return;
}
     b82:	66 96       	adiw	r28, 0x16	; 22
     b84:	0f b6       	in	r0, 0x3f	; 63
     b86:	f8 94       	cli
     b88:	de bf       	out	0x3e, r29	; 62
     b8a:	0f be       	out	0x3f, r0	; 63
     b8c:	cd bf       	out	0x3d, r28	; 61
     b8e:	df 91       	pop	r29
     b90:	cf 91       	pop	r28
     b92:	08 95       	ret

00000b94 <timeout_callback_Mailbox14>:
 * \fn      void timeout_callback_Mailbox14( void )
 * \brief
 * \return
 *****************************************************************************/
void timeout_callback_Mailbox14( void )
{
     b94:	cf 93       	push	r28
     b96:	df 93       	push	r29
     b98:	cd b7       	in	r28, 0x3d	; 61
     b9a:	de b7       	in	r29, 0x3e	; 62
     b9c:	66 97       	sbiw	r28, 0x16	; 22
     b9e:	0f b6       	in	r0, 0x3f	; 63
     ba0:	f8 94       	cli
     ba2:	de bf       	out	0x3e, r29	; 62
     ba4:	0f be       	out	0x3f, r0	; 63
     ba6:	cd bf       	out	0x3d, r28	; 61
	CanMW_MBox MboxCfg;
	Get_MboxConfig( 14, &MboxCfg );
     ba8:	be 01       	movw	r22, r28
     baa:	6f 5f       	subi	r22, 0xFF	; 255
     bac:	7f 4f       	sbci	r23, 0xFF	; 255
     bae:	8e e0       	ldi	r24, 0x0E	; 14
     bb0:	ad dd       	rcall	.-1190   	; 0x70c <Get_MboxConfig>
	MboxCfg.msg.ttc_timmer = SCH_INVALID;
     bb2:	1e 8a       	std	Y+22, r1	; 0x16
     bb4:	1d 8a       	std	Y+21, r1	; 0x15
	Write_Message_Mbox( 14, &MboxCfg);
     bb6:	be 01       	movw	r22, r28
     bb8:	6f 5f       	subi	r22, 0xFF	; 255
     bba:	7f 4f       	sbci	r23, 0xFF	; 255
     bbc:	8e e0       	ldi	r24, 0x0E	; 14
     bbe:	b4 dd       	rcall	.-1176   	; 0x728 <Write_Message_Mbox>
	return;
     bc0:	66 96       	adiw	r28, 0x16	; 22
     bc2:	0f b6       	in	r0, 0x3f	; 63
     bc4:	f8 94       	cli
     bc6:	de bf       	out	0x3e, r29	; 62
     bc8:	0f be       	out	0x3f, r0	; 63
     bca:	cd bf       	out	0x3d, r28	; 61
     bcc:	df 91       	pop	r29
     bce:	cf 91       	pop	r28
     bd0:	08 95       	ret

00000bd2 <cbSetRXBuffer>:
 * \brief
 * \note        This function is called at the beginning of the reception.
 * \return
 *****************************************************************************/
void cbSetRXBuffer( uint8_t** data, uint32_t *len)
{
     bd2:	cf 93       	push	r28
     bd4:	df 93       	push	r29
     bd6:	db 01       	movw	r26, r22
    memset( dataBufferRX, 0, sizeof( dataBufferRX ) );
     bd8:	eb e0       	ldi	r30, 0x0B	; 11
     bda:	f2 e0       	ldi	r31, 0x02	; 2
     bdc:	2e e0       	ldi	r18, 0x0E	; 14
     bde:	ef 01       	movw	r28, r30
     be0:	19 92       	st	Y+, r1
     be2:	2a 95       	dec	r18
     be4:	e9 f7       	brne	.-6      	; 0xbe0 <cbSetRXBuffer+0xe>
    *len = sizeof( dataBufferRX );
     be6:	4e e0       	ldi	r20, 0x0E	; 14
     be8:	50 e0       	ldi	r21, 0x00	; 0
     bea:	60 e0       	ldi	r22, 0x00	; 0
     bec:	70 e0       	ldi	r23, 0x00	; 0
     bee:	4d 93       	st	X+, r20
     bf0:	5d 93       	st	X+, r21
     bf2:	6d 93       	st	X+, r22
     bf4:	7c 93       	st	X, r23
     bf6:	13 97       	sbiw	r26, 0x03	; 3
    *data = dataBufferRX;
     bf8:	dc 01       	movw	r26, r24
     bfa:	ed 93       	st	X+, r30
     bfc:	fc 93       	st	X, r31
    return;
}
     bfe:	df 91       	pop	r29
     c00:	cf 91       	pop	r28
     c02:	08 95       	ret

00000c04 <cbSetTXBuffer>:
 * \brief
 * \note        This function is called at the beginning of the transmission.
 * \return
 *****************************************************************************/
void cbSetTXBuffer( uint8_t** data, uint32_t *len)
{
     c04:	cf 93       	push	r28
     c06:	df 93       	push	r29
     c08:	db 01       	movw	r26, r22
    memset( dataBufferTX, 0, sizeof( dataBufferTX ) );
     c0a:	e9 e1       	ldi	r30, 0x19	; 25
     c0c:	f2 e0       	ldi	r31, 0x02	; 2
     c0e:	2e e0       	ldi	r18, 0x0E	; 14
     c10:	ef 01       	movw	r28, r30
     c12:	19 92       	st	Y+, r1
     c14:	2a 95       	dec	r18
     c16:	e9 f7       	brne	.-6      	; 0xc12 <cbSetTXBuffer+0xe>
    *len = sizeof( dataBufferTX );
     c18:	4e e0       	ldi	r20, 0x0E	; 14
     c1a:	50 e0       	ldi	r21, 0x00	; 0
     c1c:	60 e0       	ldi	r22, 0x00	; 0
     c1e:	70 e0       	ldi	r23, 0x00	; 0
     c20:	4d 93       	st	X+, r20
     c22:	5d 93       	st	X+, r21
     c24:	6d 93       	st	X+, r22
     c26:	7c 93       	st	X, r23
     c28:	13 97       	sbiw	r26, 0x03	; 3
    *data = dataBufferTX;
     c2a:	dc 01       	movw	r26, r24
     c2c:	ed 93       	st	X+, r30
     c2e:	fc 93       	st	X, r31
    return;
}
     c30:	df 91       	pop	r29
     c32:	cf 91       	pop	r28
     c34:	08 95       	ret

00000c36 <cbStartOfFrame>:
 * \param[in]
 * \brief
 * \return
 *****************************************************************************/
uint8_t cbStartOfFrame( volatile uint8_t data )
{
     c36:	cf 93       	push	r28
     c38:	df 93       	push	r29
     c3a:	1f 92       	push	r1
     c3c:	cd b7       	in	r28, 0x3d	; 61
     c3e:	de b7       	in	r29, 0x3e	; 62
     c40:	89 83       	std	Y+1, r24	; 0x01
    uint8_t ret = FALSE;
    uint8_t cmd = GET_HIGH_NIBBLE( data );
     c42:	89 81       	ldd	r24, Y+1	; 0x01
	uint8_t mbox = GET_LOW_NIBBLE( data );
     c44:	99 81       	ldd	r25, Y+1	; 0x01
 * \return
 *****************************************************************************/
uint8_t cbStartOfFrame( volatile uint8_t data )
{
    uint8_t ret = FALSE;
    uint8_t cmd = GET_HIGH_NIBBLE( data );
     c46:	82 95       	swap	r24
     c48:	8f 70       	andi	r24, 0x0F	; 15
	uint8_t mbox = GET_LOW_NIBBLE( data );
    if ( ( ( cmd == CAN_READ ) || ( cmd == CAN_WRITE ) ) && ( mbox < NUM_MAILBOXES ) )
     c4a:	8a 50       	subi	r24, 0x0A	; 10
     c4c:	82 30       	cpi	r24, 0x02	; 2
     c4e:	30 f4       	brcc	.+12     	; 0xc5c <cbStartOfFrame+0x26>
 *****************************************************************************/
uint8_t cbStartOfFrame( volatile uint8_t data )
{
    uint8_t ret = FALSE;
    uint8_t cmd = GET_HIGH_NIBBLE( data );
	uint8_t mbox = GET_LOW_NIBBLE( data );
     c50:	9f 70       	andi	r25, 0x0F	; 15
    if ( ( ( cmd == CAN_READ ) || ( cmd == CAN_WRITE ) ) && ( mbox < NUM_MAILBOXES ) )
     c52:	81 e0       	ldi	r24, 0x01	; 1
     c54:	95 30       	cpi	r25, 0x05	; 5
     c56:	18 f0       	brcs	.+6      	; 0xc5e <cbStartOfFrame+0x28>
     c58:	80 e0       	ldi	r24, 0x00	; 0
     c5a:	01 c0       	rjmp	.+2      	; 0xc5e <cbStartOfFrame+0x28>
 * \brief
 * \return
 *****************************************************************************/
uint8_t cbStartOfFrame( volatile uint8_t data )
{
    uint8_t ret = FALSE;
     c5c:	80 e0       	ldi	r24, 0x00	; 0
    if ( ( ( cmd == CAN_READ ) || ( cmd == CAN_WRITE ) ) && ( mbox < NUM_MAILBOXES ) )
    {
        ret = TRUE;
    }
    return ret;
}
     c5e:	0f 90       	pop	r0
     c60:	df 91       	pop	r29
     c62:	cf 91       	pop	r28
     c64:	08 95       	ret

00000c66 <cbValidateChecksum>:
uint8_t cbValidateChecksum( uint8_t *data, uint8_t chksm, uint32_t len )
{
    uint32_t i  = 0;
    uint8_t sum = 0;
    uint8_t ret = FALSE;
    if ( data )
     c66:	00 97       	sbiw	r24, 0x00	; 0
     c68:	a9 f0       	breq	.+42     	; 0xc94 <cbValidateChecksum+0x2e>
    {
        for ( ; i < len; i++)
     c6a:	21 15       	cp	r18, r1
     c6c:	31 05       	cpc	r19, r1
     c6e:	41 05       	cpc	r20, r1
     c70:	51 05       	cpc	r21, r1
     c72:	51 f0       	breq	.+20     	; 0xc88 <cbValidateChecksum+0x22>
     c74:	fc 01       	movw	r30, r24
     c76:	28 0f       	add	r18, r24
     c78:	39 1f       	adc	r19, r25
     c7a:	90 e0       	ldi	r25, 0x00	; 0
        {
            sum += data[ i ];
     c7c:	81 91       	ld	r24, Z+
     c7e:	98 0f       	add	r25, r24
    uint32_t i  = 0;
    uint8_t sum = 0;
    uint8_t ret = FALSE;
    if ( data )
    {
        for ( ; i < len; i++)
     c80:	e2 17       	cp	r30, r18
     c82:	f3 07       	cpc	r31, r19
     c84:	d9 f7       	brne	.-10     	; 0xc7c <cbValidateChecksum+0x16>
     c86:	01 c0       	rjmp	.+2      	; 0xc8a <cbValidateChecksum+0x24>
     c88:	90 e0       	ldi	r25, 0x00	; 0
        {
            sum += data[ i ];
        }
        ret = ( uint8_t ) ( sum == chksm );
     c8a:	81 e0       	ldi	r24, 0x01	; 1
     c8c:	96 17       	cp	r25, r22
     c8e:	19 f0       	breq	.+6      	; 0xc96 <cbValidateChecksum+0x30>
     c90:	80 e0       	ldi	r24, 0x00	; 0
     c92:	08 95       	ret
 *****************************************************************************/
uint8_t cbValidateChecksum( uint8_t *data, uint8_t chksm, uint32_t len )
{
    uint32_t i  = 0;
    uint8_t sum = 0;
    uint8_t ret = FALSE;
     c94:	80 e0       	ldi	r24, 0x00	; 0
            sum += data[ i ];
        }
        ret = ( uint8_t ) ( sum == chksm );
    }
    return ret;
}
     c96:	08 95       	ret

00000c98 <cbCommitData>:
 * \param[in]
 * \brief
 * \return
 *****************************************************************************/
uint8_t cbCommitData( uint8_t* in, uint8_t* out, uint32_t idx, uint32_t len )
{
     c98:	bf 92       	push	r11
     c9a:	cf 92       	push	r12
     c9c:	df 92       	push	r13
     c9e:	ef 92       	push	r14
     ca0:	ff 92       	push	r15
     ca2:	0f 93       	push	r16
     ca4:	1f 93       	push	r17
     ca6:	cf 93       	push	r28
     ca8:	df 93       	push	r29
     caa:	cd b7       	in	r28, 0x3d	; 61
     cac:	de b7       	in	r29, 0x3e	; 62
     cae:	66 97       	sbiw	r28, 0x16	; 22
     cb0:	0f b6       	in	r0, 0x3f	; 63
     cb2:	f8 94       	cli
     cb4:	de bf       	out	0x3e, r29	; 62
     cb6:	0f be       	out	0x3f, r0	; 63
     cb8:	cd bf       	out	0x3d, r28	; 61
     cba:	6c 01       	movw	r12, r24
    CanMW_MBox mbcfg;
    uint8_t Mailbox  = GET_LOW_NIBBLE( in[ MSG_CMD ] );
     cbc:	fc 01       	movw	r30, r24
     cbe:	80 81       	ld	r24, Z
     cc0:	8f 70       	andi	r24, 0x0F	; 15
     cc2:	b8 2e       	mov	r11, r24
    uint32_t chkidx  = 0;
	uint8_t ret = FALSE;
    if ( ( Mailbox < NUM_MAILBOXES ) && len )
     cc4:	f4 e0       	ldi	r31, 0x04	; 4
     cc6:	f8 17       	cp	r31, r24
     cc8:	b8 f1       	brcs	.+110    	; 0xd38 <cbCommitData+0xa0>
     cca:	e1 14       	cp	r14, r1
     ccc:	f1 04       	cpc	r15, r1
     cce:	01 05       	cpc	r16, r1
     cd0:	11 05       	cpc	r17, r1
     cd2:	a1 f1       	breq	.+104    	; 0xd3c <cbCommitData+0xa4>
    {
        chkidx = len - 1;
     cd4:	a8 01       	movw	r20, r16
     cd6:	97 01       	movw	r18, r14
     cd8:	21 50       	subi	r18, 0x01	; 1
     cda:	31 09       	sbc	r19, r1
     cdc:	41 09       	sbc	r20, r1
     cde:	51 09       	sbc	r21, r1
		ret = cbValidateChecksum( in, in[ chkidx ], chkidx );
     ce0:	f6 01       	movw	r30, r12
     ce2:	e2 0f       	add	r30, r18
     ce4:	f3 1f       	adc	r31, r19
     ce6:	60 81       	ld	r22, Z
     ce8:	c6 01       	movw	r24, r12
     cea:	bd df       	rcall	.-134    	; 0xc66 <cbValidateChecksum>
     cec:	18 2f       	mov	r17, r24
#ifdef UART_OR_TWI_INTERFACE		
		cbSetupReply( in, out, &idx, ret);
		UART_StreamTransmit( out, idx );
#endif	
        Get_MboxConfig(Mailbox, &mbcfg);	
     cee:	be 01       	movw	r22, r28
     cf0:	6f 5f       	subi	r22, 0xFF	; 255
     cf2:	7f 4f       	sbci	r23, 0xFF	; 255
     cf4:	8b 2d       	mov	r24, r11
     cf6:	0a dd       	rcall	.-1516   	; 0x70c <Get_MboxConfig>
        if ( ret )
     cf8:	11 23       	and	r17, r17
     cfa:	09 f1       	breq	.+66     	; 0xd3e <cbCommitData+0xa6>
        {
            mbcfg.msg.message_id = CAT_BYTES( in[ MSG_IDH ], in [ MSG_IDL ] );
     cfc:	f6 01       	movw	r30, r12
     cfe:	81 81       	ldd	r24, Z+1	; 0x01
     d00:	90 e0       	ldi	r25, 0x00	; 0
     d02:	98 2f       	mov	r25, r24
     d04:	88 27       	eor	r24, r24
     d06:	22 81       	ldd	r18, Z+2	; 0x02
     d08:	82 2b       	or	r24, r18
     d0a:	98 87       	std	Y+8, r25	; 0x08
     d0c:	8f 83       	std	Y+7, r24	; 0x07
            mbcfg.msg.dlc = in[ MSG_DLC ];
     d0e:	83 81       	ldd	r24, Z+3	; 0x03
     d10:	89 87       	std	Y+9, r24	; 0x09
            mbcfg.msg.ttc_timmer = in[ MSG_PRD ];
     d12:	84 85       	ldd	r24, Z+12	; 0x0c
     d14:	90 e0       	ldi	r25, 0x00	; 0
     d16:	9e 8b       	std	Y+22, r25	; 0x16
     d18:	8d 8b       	std	Y+21, r24	; 0x15
            memcpy( &mbcfg.msg.data, &(in[ MSG_DT7 ]), ( MSG_DT0 - MSG_DLC ) );
     d1a:	34 96       	adiw	r30, 0x04	; 4
     d1c:	88 e0       	ldi	r24, 0x08	; 8
     d1e:	de 01       	movw	r26, r28
     d20:	1a 96       	adiw	r26, 0x0a	; 10
     d22:	01 90       	ld	r0, Z+
     d24:	0d 92       	st	X+, r0
     d26:	8a 95       	dec	r24
     d28:	e1 f7       	brne	.-8      	; 0xd22 <cbCommitData+0x8a>
			ret = TRUE;
			Write_Message_Mbox( Mailbox, &mbcfg );
     d2a:	be 01       	movw	r22, r28
     d2c:	6f 5f       	subi	r22, 0xFF	; 255
     d2e:	7f 4f       	sbci	r23, 0xFF	; 255
     d30:	8b 2d       	mov	r24, r11
     d32:	fa dc       	rcall	.-1548   	; 0x728 <Write_Message_Mbox>
        {
            mbcfg.msg.message_id = CAT_BYTES( in[ MSG_IDH ], in [ MSG_IDL ] );
            mbcfg.msg.dlc = in[ MSG_DLC ];
            mbcfg.msg.ttc_timmer = in[ MSG_PRD ];
            memcpy( &mbcfg.msg.data, &(in[ MSG_DT7 ]), ( MSG_DT0 - MSG_DLC ) );
			ret = TRUE;
     d34:	11 e0       	ldi	r17, 0x01	; 1
     d36:	03 c0       	rjmp	.+6      	; 0xd3e <cbCommitData+0xa6>
uint8_t cbCommitData( uint8_t* in, uint8_t* out, uint32_t idx, uint32_t len )
{
    CanMW_MBox mbcfg;
    uint8_t Mailbox  = GET_LOW_NIBBLE( in[ MSG_CMD ] );
    uint32_t chkidx  = 0;
	uint8_t ret = FALSE;
     d38:	10 e0       	ldi	r17, 0x00	; 0
     d3a:	01 c0       	rjmp	.+2      	; 0xd3e <cbCommitData+0xa6>
     d3c:	10 e0       	ldi	r17, 0x00	; 0
			ret = TRUE;
			Write_Message_Mbox( Mailbox, &mbcfg );
        }    
    }
    return ret;
}
     d3e:	81 2f       	mov	r24, r17
     d40:	66 96       	adiw	r28, 0x16	; 22
     d42:	0f b6       	in	r0, 0x3f	; 63
     d44:	f8 94       	cli
     d46:	de bf       	out	0x3e, r29	; 62
     d48:	0f be       	out	0x3f, r0	; 63
     d4a:	cd bf       	out	0x3d, r28	; 61
     d4c:	df 91       	pop	r29
     d4e:	cf 91       	pop	r28
     d50:	1f 91       	pop	r17
     d52:	0f 91       	pop	r16
     d54:	ff 90       	pop	r15
     d56:	ef 90       	pop	r14
     d58:	df 90       	pop	r13
     d5a:	cf 90       	pop	r12
     d5c:	bf 90       	pop	r11
     d5e:	08 95       	ret

00000d60 <cbDecodeReceivedData>:
 * \note        This function is called at the end of the reception.
 *              Checksum is assumed to be the last byte received.
 * \return
 *****************************************************************************/
void cbDecodeReceivedData( uint8_t *data, uint32_t len )
{
     d60:	cf 92       	push	r12
     d62:	df 92       	push	r13
     d64:	ef 92       	push	r14
     d66:	ff 92       	push	r15
     d68:	0f 93       	push	r16
     d6a:	1f 93       	push	r17
     d6c:	cf 93       	push	r28
     d6e:	df 93       	push	r29
     d70:	ec 01       	movw	r28, r24
     d72:	6a 01       	movw	r12, r20
     d74:	7b 01       	movw	r14, r22
    uint8_t chksmCorrect = FALSE;
    uint8_t cmd = 0;
    uint8_t idx = 0;
    uint32_t chkidx = 0;
    // Data pointer must not be NULL and len must be higher than zero.
    if ( ( data ) && ( len ) )
     d76:	00 97       	sbiw	r24, 0x00	; 0
     d78:	39 f1       	breq	.+78     	; 0xdc8 <cbDecodeReceivedData+0x68>
     d7a:	41 15       	cp	r20, r1
     d7c:	51 05       	cpc	r21, r1
     d7e:	61 05       	cpc	r22, r1
     d80:	71 05       	cpc	r23, r1
     d82:	11 f1       	breq	.+68     	; 0xdc8 <cbDecodeReceivedData+0x68>
    {
        chkidx = len - 1;
     d84:	9a 01       	movw	r18, r20
     d86:	ab 01       	movw	r20, r22
     d88:	21 50       	subi	r18, 0x01	; 1
     d8a:	31 09       	sbc	r19, r1
     d8c:	41 09       	sbc	r20, r1
     d8e:	51 09       	sbc	r21, r1
        chksmCorrect = cbValidateChecksum( data, data[ chkidx ], chkidx );
     d90:	fc 01       	movw	r30, r24
     d92:	e2 0f       	add	r30, r18
     d94:	f3 1f       	adc	r31, r19
     d96:	60 81       	ld	r22, Z
     d98:	66 df       	rcall	.-308    	; 0xc66 <cbValidateChecksum>
        if ( chksmCorrect )
     d9a:	88 23       	and	r24, r24
     d9c:	a9 f0       	breq	.+42     	; 0xdc8 <cbDecodeReceivedData+0x68>
        {
            cmd = GET_HIGH_NIBBLE( data[ idx ] );
     d9e:	98 81       	ld	r25, Y
     da0:	89 2f       	mov	r24, r25
     da2:	82 95       	swap	r24
     da4:	8f 70       	andi	r24, 0x0F	; 15
        }
        if ( cmd == CAN_READ )
     da6:	8a 30       	cpi	r24, 0x0A	; 10
     da8:	21 f4       	brne	.+8      	; 0xdb2 <cbDecodeReceivedData+0x52>
        {
            targetMailbox = GET_LOW_NIBBLE( data[ idx ] );
     daa:	9f 70       	andi	r25, 0x0F	; 15
     dac:	90 93 00 01 	sts	0x0100, r25
     db0:	0b c0       	rjmp	.+22     	; 0xdc8 <cbDecodeReceivedData+0x68>
        }
        else if ( cmd == CAN_WRITE )
     db2:	8b 30       	cpi	r24, 0x0B	; 11
     db4:	49 f4       	brne	.+18     	; 0xdc8 <cbDecodeReceivedData+0x68>
        {
            cbCommitData( data, NULL, 0, len);
     db6:	87 01       	movw	r16, r14
     db8:	76 01       	movw	r14, r12
     dba:	20 e0       	ldi	r18, 0x00	; 0
     dbc:	30 e0       	ldi	r19, 0x00	; 0
     dbe:	a9 01       	movw	r20, r18
     dc0:	60 e0       	ldi	r22, 0x00	; 0
     dc2:	70 e0       	ldi	r23, 0x00	; 0
     dc4:	ce 01       	movw	r24, r28
     dc6:	68 df       	rcall	.-304    	; 0xc98 <cbCommitData>
        {
            //No operation
        }
    }
    return;
}
     dc8:	df 91       	pop	r29
     dca:	cf 91       	pop	r28
     dcc:	1f 91       	pop	r17
     dce:	0f 91       	pop	r16
     dd0:	ff 90       	pop	r15
     dd2:	ef 90       	pop	r14
     dd4:	df 90       	pop	r13
     dd6:	cf 90       	pop	r12
     dd8:	08 95       	ret

00000dda <cbCalculateChecksum>:
 *****************************************************************************/
uint8_t cbCalculateChecksum( uint8_t* data, uint32_t len )
{
    uint8_t ret = 0;
    uint32_t i  = 0;
    if ( data )
     dda:	00 97       	sbiw	r24, 0x00	; 0
     ddc:	79 f0       	breq	.+30     	; 0xdfc <cbCalculateChecksum+0x22>
    {
        for ( ; i < len; i++ )
     dde:	41 15       	cp	r20, r1
     de0:	51 05       	cpc	r21, r1
     de2:	61 05       	cpc	r22, r1
     de4:	71 05       	cpc	r23, r1
     de6:	61 f0       	breq	.+24     	; 0xe00 <cbCalculateChecksum+0x26>
     de8:	fc 01       	movw	r30, r24
     dea:	48 0f       	add	r20, r24
     dec:	59 1f       	adc	r21, r25
     dee:	80 e0       	ldi	r24, 0x00	; 0
        {
            ret += data[i];
     df0:	91 91       	ld	r25, Z+
     df2:	89 0f       	add	r24, r25
{
    uint8_t ret = 0;
    uint32_t i  = 0;
    if ( data )
    {
        for ( ; i < len; i++ )
     df4:	e4 17       	cp	r30, r20
     df6:	f5 07       	cpc	r31, r21
     df8:	d9 f7       	brne	.-10     	; 0xdf0 <cbCalculateChecksum+0x16>
     dfa:	08 95       	ret
 * \brief
 * \return
 *****************************************************************************/
uint8_t cbCalculateChecksum( uint8_t* data, uint32_t len )
{
    uint8_t ret = 0;
     dfc:	80 e0       	ldi	r24, 0x00	; 0
     dfe:	08 95       	ret
    uint32_t i  = 0;
    if ( data )
    {
        for ( ; i < len; i++ )
     e00:	80 e0       	ldi	r24, 0x00	; 0
        {
            ret += data[i];
        }
    }
    return ret;
}
     e02:	08 95       	ret

00000e04 <cbBuildDataFrame>:
 * \brief
 * \return
 *****************************************************************************/
uint32_t cbBuildDataFrame(uint8_t* data, CanMw_Message *msg,
                          CanMW_MBox *mailbox )
{
     e04:	cf 93       	push	r28
     e06:	df 93       	push	r29
     e08:	ec 01       	movw	r28, r24
    messageFields ret     = 0;
    uint8_t checksum = 0;

    if ( data && msg && mailbox )
     e0a:	00 97       	sbiw	r24, 0x00	; 0
     e0c:	41 f1       	breq	.+80     	; 0xe5e <cbBuildDataFrame+0x5a>
     e0e:	61 15       	cp	r22, r1
     e10:	71 05       	cpc	r23, r1
     e12:	39 f1       	breq	.+78     	; 0xe62 <cbBuildDataFrame+0x5e>
     e14:	45 2b       	or	r20, r21
     e16:	39 f1       	breq	.+78     	; 0xe66 <cbBuildDataFrame+0x62>
    {
        data[ MSG_CMD ] = CAT_NIBBLES( CAN_WRITE, targetMailbox );
     e18:	80 91 00 01 	lds	r24, 0x0100
     e1c:	8f 70       	andi	r24, 0x0F	; 15
     e1e:	80 6b       	ori	r24, 0xB0	; 176
     e20:	88 83       	st	Y, r24
        data[ MSG_IDH ] = GET_HIGH_BYTE( msg->message_id );
     e22:	fb 01       	movw	r30, r22
     e24:	81 81       	ldd	r24, Z+1	; 0x01
     e26:	89 83       	std	Y+1, r24	; 0x01
        data[ MSG_IDL ] = GET_LOW_BYTE( msg->message_id );
     e28:	80 81       	ld	r24, Z
     e2a:	8a 83       	std	Y+2, r24	; 0x02
        data[ MSG_DLC ] = msg->dlc;
     e2c:	82 81       	ldd	r24, Z+2	; 0x02
     e2e:	8b 83       	std	Y+3, r24	; 0x03
        memcpy( ( data + MSG_DT7 ), msg->data, ( sizeof( msg->data ) / sizeof( can_message_data ) ) );
     e30:	de 01       	movw	r26, r28
     e32:	14 96       	adiw	r26, 0x04	; 4
     e34:	33 96       	adiw	r30, 0x03	; 3
     e36:	89 e0       	ldi	r24, 0x09	; 9
     e38:	01 90       	ld	r0, Z+
     e3a:	0d 92       	st	X+, r0
     e3c:	8a 95       	dec	r24
     e3e:	e1 f7       	brne	.-8      	; 0xe38 <cbBuildDataFrame+0x34>
        data[ MSG_PRD ] = GET_LOW_BYTE( msg->ttc_timmer );
     e40:	fb 01       	movw	r30, r22
     e42:	86 85       	ldd	r24, Z+14	; 0x0e
     e44:	8c 87       	std	Y+12, r24	; 0x0c
        checksum = cbCalculateChecksum( data, MSG_CHK );
     e46:	4d e0       	ldi	r20, 0x0D	; 13
     e48:	50 e0       	ldi	r21, 0x00	; 0
     e4a:	60 e0       	ldi	r22, 0x00	; 0
     e4c:	70 e0       	ldi	r23, 0x00	; 0
     e4e:	ce 01       	movw	r24, r28
     e50:	c4 df       	rcall	.-120    	; 0xdda <cbCalculateChecksum>
        data[ MSG_CHK ] = checksum;
     e52:	8d 87       	std	Y+13, r24	; 0x0d
        ret = MSG_TOTAL_LENGTH;
        targetMailbox = NUM_MAILBOXES;
     e54:	85 e0       	ldi	r24, 0x05	; 5
     e56:	80 93 00 01 	sts	0x0100, r24
        data[ MSG_DLC ] = msg->dlc;
        memcpy( ( data + MSG_DT7 ), msg->data, ( sizeof( msg->data ) / sizeof( can_message_data ) ) );
        data[ MSG_PRD ] = GET_LOW_BYTE( msg->ttc_timmer );
        checksum = cbCalculateChecksum( data, MSG_CHK );
        data[ MSG_CHK ] = checksum;
        ret = MSG_TOTAL_LENGTH;
     e5a:	6e e0       	ldi	r22, 0x0E	; 14
     e5c:	05 c0       	rjmp	.+10     	; 0xe68 <cbBuildDataFrame+0x64>
 * \return
 *****************************************************************************/
uint32_t cbBuildDataFrame(uint8_t* data, CanMw_Message *msg,
                          CanMW_MBox *mailbox )
{
    messageFields ret     = 0;
     e5e:	60 e0       	ldi	r22, 0x00	; 0
     e60:	03 c0       	rjmp	.+6      	; 0xe68 <cbBuildDataFrame+0x64>
     e62:	60 e0       	ldi	r22, 0x00	; 0
     e64:	01 c0       	rjmp	.+2      	; 0xe68 <cbBuildDataFrame+0x64>
     e66:	60 e0       	ldi	r22, 0x00	; 0
        data[ MSG_CHK ] = checksum;
        ret = MSG_TOTAL_LENGTH;
        targetMailbox = NUM_MAILBOXES;
    }

    return ret;
     e68:	70 e0       	ldi	r23, 0x00	; 0
     e6a:	80 e0       	ldi	r24, 0x00	; 0
     e6c:	90 e0       	ldi	r25, 0x00	; 0
}
     e6e:	df 91       	pop	r29
     e70:	cf 91       	pop	r28
     e72:	08 95       	ret

00000e74 <cbFetchData>:
 * \brief       This function is called at every read request from a master to
 *              this device.
 * \return      uint32_t returns data length in bytes
 *****************************************************************************/
uint32_t cbFetchData( uint8_t* data )
{
     e74:	0f 93       	push	r16
     e76:	1f 93       	push	r17
     e78:	cf 93       	push	r28
     e7a:	df 93       	push	r29
     e7c:	cd b7       	in	r28, 0x3d	; 61
     e7e:	de b7       	in	r29, 0x3e	; 62
     e80:	a6 97       	sbiw	r28, 0x26	; 38
     e82:	0f b6       	in	r0, 0x3f	; 63
     e84:	f8 94       	cli
     e86:	de bf       	out	0x3e, r29	; 62
     e88:	0f be       	out	0x3f, r0	; 63
     e8a:	cd bf       	out	0x3d, r28	; 61
     e8c:	8c 01       	movw	r16, r24
    uint32_t ret        = 0;
    CanMw_Message msg;
    CanMW_MBox mailbox;
    uint32_t len = NUM_CONTROL_BYTES;
    if ( targetMailbox < NUM_MAILBOXES )
     e8e:	80 91 00 01 	lds	r24, 0x0100
     e92:	85 30       	cpi	r24, 0x05	; 5
     e94:	00 f5       	brcc	.+64     	; 0xed6 <cbFetchData+0x62>
    {
        Get_Message_FromMbox( targetMailbox, &msg );
     e96:	be 01       	movw	r22, r28
     e98:	6f 5f       	subi	r22, 0xFF	; 255
     e9a:	7f 4f       	sbci	r23, 0xFF	; 255
     e9c:	29 dc       	rcall	.-1966   	; 0x6f0 <Get_Message_FromMbox>
        Get_MboxConfig( targetMailbox, &mailbox );
     e9e:	be 01       	movw	r22, r28
     ea0:	6f 5e       	subi	r22, 0xEF	; 239
     ea2:	7f 4f       	sbci	r23, 0xFF	; 255
     ea4:	80 91 00 01 	lds	r24, 0x0100
     ea8:	31 dc       	rcall	.-1950   	; 0x70c <Get_MboxConfig>
        len += msg.dlc;
     eaa:	4b 81       	ldd	r20, Y+3	; 0x03
     eac:	50 e0       	ldi	r21, 0x00	; 0
     eae:	60 e0       	ldi	r22, 0x00	; 0
     eb0:	70 e0       	ldi	r23, 0x00	; 0
     eb2:	4c 5f       	subi	r20, 0xFC	; 252
     eb4:	5f 4f       	sbci	r21, 0xFF	; 255
     eb6:	6f 4f       	sbci	r22, 0xFF	; 255
     eb8:	7f 4f       	sbci	r23, 0xFF	; 255
        if ( len  < DATA_LEN )
     eba:	4e 30       	cpi	r20, 0x0E	; 14
     ebc:	51 05       	cpc	r21, r1
     ebe:	61 05       	cpc	r22, r1
     ec0:	71 05       	cpc	r23, r1
     ec2:	68 f4       	brcc	.+26     	; 0xede <cbFetchData+0x6a>
        {
            ret = cbBuildDataFrame( data, &msg, &mailbox );
     ec4:	ae 01       	movw	r20, r28
     ec6:	4f 5e       	subi	r20, 0xEF	; 239
     ec8:	5f 4f       	sbci	r21, 0xFF	; 255
     eca:	be 01       	movw	r22, r28
     ecc:	6f 5f       	subi	r22, 0xFF	; 255
     ece:	7f 4f       	sbci	r23, 0xFF	; 255
     ed0:	c8 01       	movw	r24, r16
     ed2:	98 df       	rcall	.-208    	; 0xe04 <cbBuildDataFrame>
     ed4:	07 c0       	rjmp	.+14     	; 0xee4 <cbFetchData+0x70>
 *              this device.
 * \return      uint32_t returns data length in bytes
 *****************************************************************************/
uint32_t cbFetchData( uint8_t* data )
{
    uint32_t ret        = 0;
     ed6:	60 e0       	ldi	r22, 0x00	; 0
     ed8:	70 e0       	ldi	r23, 0x00	; 0
     eda:	cb 01       	movw	r24, r22
     edc:	03 c0       	rjmp	.+6      	; 0xee4 <cbFetchData+0x70>
     ede:	60 e0       	ldi	r22, 0x00	; 0
     ee0:	70 e0       	ldi	r23, 0x00	; 0
     ee2:	cb 01       	movw	r24, r22
        {
            ret = cbBuildDataFrame( data, &msg, &mailbox );
        }
    }
    return ret;
}
     ee4:	a6 96       	adiw	r28, 0x26	; 38
     ee6:	0f b6       	in	r0, 0x3f	; 63
     ee8:	f8 94       	cli
     eea:	de bf       	out	0x3e, r29	; 62
     eec:	0f be       	out	0x3f, r0	; 63
     eee:	cd bf       	out	0x3d, r28	; 61
     ef0:	df 91       	pop	r29
     ef2:	cf 91       	pop	r28
     ef4:	1f 91       	pop	r17
     ef6:	0f 91       	pop	r16
     ef8:	08 95       	ret

00000efa <schedulerSetupItem>:
 * \fn      void msgSchedulerEnableInterrupt( void )
 * \return
 *****************************************************************************/
void schedulerEnableInterrupt( void )
{
    tmr0At90can128EnableInterrupts( SCHEDULER_INTERRUPT_EN );
     efa:	27 e0       	ldi	r18, 0x07	; 7
     efc:	82 9f       	mul	r24, r18
     efe:	c0 01       	movw	r24, r0
     f00:	11 24       	eor	r1, r1
     f02:	fc 01       	movw	r30, r24
     f04:	ef 5f       	subi	r30, 0xFF	; 255
     f06:	fe 4f       	sbci	r31, 0xFE	; 254
     f08:	60 83       	st	Z, r22
     f0a:	50 e0       	ldi	r21, 0x00	; 0
     f0c:	44 0f       	add	r20, r20
     f0e:	55 1f       	adc	r21, r21
     f10:	46 59       	subi	r20, 0x96	; 150
     f12:	5e 4f       	sbci	r21, 0xFE	; 254
     f14:	52 83       	std	Z+2, r21	; 0x02
     f16:	41 83       	std	Z+1, r20	; 0x01
     f18:	08 95       	ret

00000f1a <schedulerInit>:
     f1a:	41 e0       	ldi	r20, 0x01	; 1
     f1c:	62 e0       	ldi	r22, 0x02	; 2
     f1e:	85 e0       	ldi	r24, 0x05	; 5
     f20:	87 d0       	rcall	.+270    	; 0x1030 <tmr0At90can128Init>
     f22:	8d e4       	ldi	r24, 0x4D	; 77
     f24:	a1 d0       	rcall	.+322    	; 0x1068 <tmr0At90can128SetTop>
     f26:	80 e0       	ldi	r24, 0x00	; 0
     f28:	9d d0       	rcall	.+314    	; 0x1064 <tmr0At90can128SetCount>
     f2a:	81 e0       	ldi	r24, 0x01	; 1
     f2c:	9f c0       	rjmp	.+318    	; 0x106c <tmr0At90can128SetupOC0A>
     f2e:	08 95       	ret

00000f30 <schedulerResetCount>:
 * \brief   Resets the current count.
 * \return
 *****************************************************************************/
void schedulerResetCount( uint8_t index )
{
	schedule[ index ].count = SCH_COUNT_INIT;
     f30:	27 e0       	ldi	r18, 0x07	; 7
     f32:	82 9f       	mul	r24, r18
     f34:	c0 01       	movw	r24, r0
     f36:	11 24       	eor	r1, r1
     f38:	fc 01       	movw	r30, r24
     f3a:	ef 5f       	subi	r30, 0xFF	; 255
     f3c:	fe 4f       	sbci	r31, 0xFE	; 254
     f3e:	14 82       	std	Z+4, r1	; 0x04
     f40:	08 95       	ret

00000f42 <schedulerEventHandler>:
/**************************************************************************//**
 * \fn      void schedulerEventHandler( void )
 * \return
 *****************************************************************************/
void schedulerEventHandler( void )
{
     f42:	4f 92       	push	r4
     f44:	5f 92       	push	r5
     f46:	6f 92       	push	r6
     f48:	7f 92       	push	r7
     f4a:	8f 92       	push	r8
     f4c:	9f 92       	push	r9
     f4e:	af 92       	push	r10
     f50:	bf 92       	push	r11
     f52:	cf 92       	push	r12
     f54:	df 92       	push	r13
     f56:	ef 92       	push	r14
     f58:	ff 92       	push	r15
     f5a:	0f 93       	push	r16
     f5c:	1f 93       	push	r17
     f5e:	cf 93       	push	r28
     f60:	df 93       	push	r29
                                    // should change.
    uint8_t count = SCH_COUNT_INIT; // An item's current count.
    uint8_t state = SCH_LOW_STATE;  // An item's current state;
    // This function shall be called only if the interrupt is disabled but
    // the flag must be active.
	if ( !( tmr0At90can128areInterruptsEnabled( ) & SCHEDULER_INTERRUPT_EN )
     f62:	7d d0       	rcall	.+250    	; 0x105e <tmr0At90can128areInterruptsEnabled>
     f64:	81 fd       	sbrc	r24, 1
     f66:	53 c0       	rjmp	.+166    	; 0x100e <schedulerEventHandler+0xcc>
			&& ( tmr0At90can128isOCF0AOn( ) ) )
     f68:	87 d0       	rcall	.+270    	; 0x1078 <tmr0At90can128isOCF0AOn>
     f6a:	88 23       	and	r24, r24
     f6c:	09 f4       	brne	.+2      	; 0xf70 <schedulerEventHandler+0x2e>
     f6e:	4f c0       	rjmp	.+158    	; 0x100e <schedulerEventHandler+0xcc>
    {
        tmr0At90can128ClearOCF0A( ); //turn off the interrupt flag.
     f70:	86 d0       	rcall	.+268    	; 0x107e <tmr0At90can128ClearOCF0A>
     f72:	c1 e0       	ldi	r28, 0x01	; 1
     f74:	d1 e0       	ldi	r29, 0x01	; 1
     f76:	05 e0       	ldi	r16, 0x05	; 5
     f78:	11 e0       	ldi	r17, 0x01	; 1
     f7a:	0f 2e       	mov	r0, r31
     f7c:	f4 e0       	ldi	r31, 0x04	; 4
     f7e:	ef 2e       	mov	r14, r31
     f80:	f1 e0       	ldi	r31, 0x01	; 1
     f82:	ff 2e       	mov	r15, r31
     f84:	f0 2d       	mov	r31, r0
     f86:	0f 2e       	mov	r0, r31
     f88:	fe e6       	ldi	r31, 0x6E	; 110
     f8a:	cf 2e       	mov	r12, r31
     f8c:	f1 e0       	ldi	r31, 0x01	; 1
     f8e:	df 2e       	mov	r13, r31
     f90:	f0 2d       	mov	r31, r0
 *****************************************************************************/
void schedulerEventHandler( void )
{
    uint8_t index = 0;              // Schedule index used to reference
                                    // its items.
    uint8_t timeElapsed = FALSE;    // States if the schedule item's state
     f92:	71 2c       	mov	r7, r1
                    break;
            }
            if ( timeElapsed )
            {
                count = SCH_COUNT_INIT;
                state = !state;
     f94:	66 24       	eor	r6, r6
     f96:	63 94       	inc	r6
                default:
                    break;
            }
            if ( timeElapsed )
            {
                count = SCH_COUNT_INIT;
     f98:	51 2c       	mov	r5, r1
			&& ( tmr0At90can128isOCF0AOn( ) ) )
    {
        tmr0At90can128ClearOCF0A( ); //turn off the interrupt flag.
        for ( ; index < SCHEDULE_NUM_ITEMS; index++ )
        {
            if ( ( !schedule[ index ].active ) 
     f9a:	88 81       	ld	r24, Y
     f9c:	88 23       	and	r24, r24
     f9e:	71 f1       	breq	.+92     	; 0xffc <schedulerEventHandler+0xba>
			|| ( !( schedule[ index ].dty_cycles->high_cycles ) 
     fa0:	e9 81       	ldd	r30, Y+1	; 0x01
     fa2:	fa 81       	ldd	r31, Y+2	; 0x02
     fa4:	81 81       	ldd	r24, Z+1	; 0x01
     fa6:	88 23       	and	r24, r24
     fa8:	49 f1       	breq	.+82     	; 0xffc <schedulerEventHandler+0xba>
			|| !( schedule[ index ].dty_cycles->low_cycles ) ) )
     faa:	90 81       	ld	r25, Z
     fac:	99 23       	and	r25, r25
     fae:	31 f1       	breq	.+76     	; 0xffc <schedulerEventHandler+0xba>
     fb0:	58 01       	movw	r10, r16
            {
                continue;
            }
            count = schedule[ index ].count;
     fb2:	d8 01       	movw	r26, r16
     fb4:	2c 91       	ld	r18, X
     fb6:	47 01       	movw	r8, r14
            state = schedule[ index ].state;
     fb8:	f7 01       	movw	r30, r14
     fba:	30 81       	ld	r19, Z
            switch ( state )
     fbc:	33 23       	and	r19, r19
     fbe:	39 f0       	breq	.+14     	; 0xfce <schedulerEventHandler+0x8c>
     fc0:	31 30       	cpi	r19, 0x01	; 1
     fc2:	49 f4       	brne	.+18     	; 0xfd6 <schedulerEventHandler+0x94>
            {
                case SCH_HIGH_STATE:
                    timeElapsed =
                            ( schedule[ index ].dty_cycles->high_cycles
                              <= count );
     fc4:	76 2c       	mov	r7, r6
     fc6:	28 17       	cp	r18, r24
     fc8:	30 f4       	brcc	.+12     	; 0xfd6 <schedulerEventHandler+0x94>
     fca:	75 2c       	mov	r7, r5
                    break;
     fcc:	04 c0       	rjmp	.+8      	; 0xfd6 <schedulerEventHandler+0x94>
                case SCH_LOW_STATE:
                    timeElapsed =
                            ( schedule[ index ].dty_cycles->low_cycles
                              <= count );
     fce:	76 2c       	mov	r7, r6
     fd0:	29 17       	cp	r18, r25
     fd2:	08 f4       	brcc	.+2      	; 0xfd6 <schedulerEventHandler+0x94>
     fd4:	75 2c       	mov	r7, r5
                    break;
                default:
                    break;
            }
            if ( timeElapsed )
     fd6:	77 20       	and	r7, r7
     fd8:	71 f0       	breq	.+28     	; 0xff6 <schedulerEventHandler+0xb4>
            {
                count = SCH_COUNT_INIT;
                state = !state;
     fda:	46 2c       	mov	r4, r6
     fdc:	31 11       	cpse	r19, r1
     fde:	45 2c       	mov	r4, r5
                if ( state )
     fe0:	44 20       	and	r4, r4
     fe2:	31 f0       	breq	.+12     	; 0xff0 <schedulerEventHandler+0xae>
                {
                    // At every positive edge transition the item's
                    // function is called.
                    ( schedule[ index ].function )(  );
     fe4:	d5 01       	movw	r26, r10
     fe6:	11 96       	adiw	r26, 0x01	; 1
     fe8:	ed 91       	ld	r30, X+
     fea:	fc 91       	ld	r31, X
     fec:	12 97       	sbiw	r26, 0x02	; 2
     fee:	09 95       	icall
                }
                schedule[ index ].state = state;
     ff0:	f4 01       	movw	r30, r8
     ff2:	40 82       	st	Z, r4
                default:
                    break;
            }
            if ( timeElapsed )
            {
                count = SCH_COUNT_INIT;
     ff4:	25 2d       	mov	r18, r5
                    // function is called.
                    ( schedule[ index ].function )(  );
                }
                schedule[ index ].state = state;
            }
            count++;
     ff6:	2f 5f       	subi	r18, 0xFF	; 255
            schedule[ index ].count = count;
     ff8:	d5 01       	movw	r26, r10
     ffa:	2c 93       	st	X, r18
     ffc:	27 96       	adiw	r28, 0x07	; 7
     ffe:	09 5f       	subi	r16, 0xF9	; 249
    1000:	1f 4f       	sbci	r17, 0xFF	; 255
    1002:	b7 e0       	ldi	r27, 0x07	; 7
    1004:	eb 0e       	add	r14, r27
    1006:	f1 1c       	adc	r15, r1
    // the flag must be active.
	if ( !( tmr0At90can128areInterruptsEnabled( ) & SCHEDULER_INTERRUPT_EN )
			&& ( tmr0At90can128isOCF0AOn( ) ) )
    {
        tmr0At90can128ClearOCF0A( ); //turn off the interrupt flag.
        for ( ; index < SCHEDULE_NUM_ITEMS; index++ )
    1008:	0c 15       	cp	r16, r12
    100a:	1d 05       	cpc	r17, r13
    100c:	31 f6       	brne	.-116    	; 0xf9a <schedulerEventHandler+0x58>
            count++;
            schedule[ index ].count = count;
        }
    }
	return;
}
    100e:	df 91       	pop	r29
    1010:	cf 91       	pop	r28
    1012:	1f 91       	pop	r17
    1014:	0f 91       	pop	r16
    1016:	ff 90       	pop	r15
    1018:	ef 90       	pop	r14
    101a:	df 90       	pop	r13
    101c:	cf 90       	pop	r12
    101e:	bf 90       	pop	r11
    1020:	af 90       	pop	r10
    1022:	9f 90       	pop	r9
    1024:	8f 90       	pop	r8
    1026:	7f 90       	pop	r7
    1028:	6f 90       	pop	r6
    102a:	5f 90       	pop	r5
    102c:	4f 90       	pop	r4
    102e:	08 95       	ret

00001030 <tmr0At90can128Init>:
	{
        INPUT_T0( );
	}
	else
	{
		OUTPUT_T0( );
    1030:	87 70       	andi	r24, 0x07	; 7
    1032:	90 e1       	ldi	r25, 0x10	; 16
    1034:	49 9f       	mul	r20, r25
    1036:	a0 01       	movw	r20, r0
    1038:	11 24       	eor	r1, r1
    103a:	40 73       	andi	r20, 0x30	; 48
    103c:	63 30       	cpi	r22, 0x03	; 3
    103e:	31 f0       	breq	.+12     	; 0x104c <tmr0At90can128Init+0x1c>
    1040:	62 30       	cpi	r22, 0x02	; 2
    1042:	31 f0       	breq	.+12     	; 0x1050 <tmr0At90can128Init+0x20>
    1044:	61 30       	cpi	r22, 0x01	; 1
    1046:	31 f4       	brne	.+12     	; 0x1054 <tmr0At90can128Init+0x24>
    1048:	90 e4       	ldi	r25, 0x40	; 64
    104a:	05 c0       	rjmp	.+10     	; 0x1056 <tmr0At90can128Init+0x26>
    104c:	98 e4       	ldi	r25, 0x48	; 72
    104e:	03 c0       	rjmp	.+6      	; 0x1056 <tmr0At90can128Init+0x26>
    1050:	98 e0       	ldi	r25, 0x08	; 8
    1052:	01 c0       	rjmp	.+2      	; 0x1056 <tmr0At90can128Init+0x26>
    1054:	90 e0       	ldi	r25, 0x00	; 0
    1056:	48 2b       	or	r20, r24
    1058:	49 2b       	or	r20, r25
    105a:	44 bd       	out	0x24, r20	; 36
    105c:	08 95       	ret

0000105e <tmr0At90can128areInterruptsEnabled>:
    105e:	80 91 6e 00 	lds	r24, 0x006E
    1062:	08 95       	ret

00001064 <tmr0At90can128SetCount>:
    1064:	86 bd       	out	0x26, r24	; 38
    1066:	08 95       	ret

00001068 <tmr0At90can128SetTop>:
    1068:	87 bd       	out	0x27, r24	; 39
    106a:	08 95       	ret

0000106c <tmr0At90can128SetupOC0A>:
    106c:	81 11       	cpse	r24, r1
    106e:	02 c0       	rjmp	.+4      	; 0x1074 <tmr0At90can128SetupOC0A+0x8>
    1070:	27 98       	cbi	0x04, 7	; 4
    1072:	08 95       	ret
    1074:	27 9a       	sbi	0x04, 7	; 4
    1076:	08 95       	ret

00001078 <tmr0At90can128isOCF0AOn>:
 *****************************************************************************/
uint8_t tmr0At90can128isOCF0AOn( void )
{
    uint8_t ret = FALSE;

    ret = TIFR0 & ( TRUE << ( OCF0A ) );
    1078:	85 b3       	in	r24, 0x15	; 21

    return ret;
}
    107a:	82 70       	andi	r24, 0x02	; 2
    107c:	08 95       	ret

0000107e <tmr0At90can128ClearOCF0A>:
 * \brief
 * \return
 *****************************************************************************/
void tmr0At90can128ClearOCF0A( void )
{
	TIFR0 |= ( TRUE << ( OCF0A ) );
    107e:	a9 9a       	sbi	0x15, 1	; 21
    1080:	08 95       	ret

00001082 <__vector_16>:
 *          channels are available, thus a different vector name should
 *          be referenced instead.
 * \return
 *****************************************************************************/
ISR( TIMER0_COMP_vect )
{
    1082:	1f 92       	push	r1
    1084:	0f 92       	push	r0
    1086:	0f b6       	in	r0, 0x3f	; 63
    1088:	0f 92       	push	r0
    108a:	11 24       	eor	r1, r1

}
    108c:	0f 90       	pop	r0
    108e:	0f be       	out	0x3f, r0	; 63
    1090:	0f 90       	pop	r0
    1092:	1f 90       	pop	r1
    1094:	18 95       	reti

00001096 <__vector_17>:
 * \brief   This isr is called when TCNT0 passes from MAX to MIN.
 * \note
 * \return
 *****************************************************************************/
ISR( TIMER0_OVF_vect )
{
    1096:	1f 92       	push	r1
    1098:	0f 92       	push	r0
    109a:	0f b6       	in	r0, 0x3f	; 63
    109c:	0f 92       	push	r0
    109e:	11 24       	eor	r1, r1

}
    10a0:	0f 90       	pop	r0
    10a2:	0f be       	out	0x3f, r0	; 63
    10a4:	0f 90       	pop	r0
    10a6:	1f 90       	pop	r1
    10a8:	18 95       	reti

000010aa <twiAt90can128Init>:
 * \return uint8_t Boolean value
 *****************************************************************************/
uint8_t twiAt90can128IsBusy( void )
{
    return twiInProgress;
}
    10aa:	90 e0       	ldi	r25, 0x00	; 0
    10ac:	10 92 27 02 	sts	0x0227, r1
    10b0:	20 93 b9 00 	sts	0x00B9, r18
    10b4:	40 93 b8 00 	sts	0x00B8, r20
    10b8:	66 23       	and	r22, r22
    10ba:	19 f0       	breq	.+6      	; 0x10c2 <twiAt90can128Init+0x18>
    10bc:	60 93 ba 00 	sts	0x00BA, r22
    10c0:	03 c0       	rjmp	.+6      	; 0x10c8 <twiAt90can128Init+0x1e>
    10c2:	29 e3       	ldi	r18, 0x39	; 57
    10c4:	20 93 ba 00 	sts	0x00BA, r18
    10c8:	88 23       	and	r24, r24
    10ca:	31 f0       	breq	.+12     	; 0x10d8 <twiAt90can128Init+0x2e>
    10cc:	ea eb       	ldi	r30, 0xBA	; 186
    10ce:	f0 e0       	ldi	r31, 0x00	; 0
    10d0:	80 81       	ld	r24, Z
    10d2:	81 60       	ori	r24, 0x01	; 1
    10d4:	80 83       	st	Z, r24
    10d6:	05 c0       	rjmp	.+10     	; 0x10e2 <twiAt90can128Init+0x38>
    10d8:	ea eb       	ldi	r30, 0xBA	; 186
    10da:	f0 e0       	ldi	r31, 0x00	; 0
    10dc:	80 81       	ld	r24, Z
    10de:	8e 7f       	andi	r24, 0xFE	; 254
    10e0:	80 83       	st	Z, r24
    10e2:	94 60       	ori	r25, 0x04	; 4
    10e4:	90 64       	ori	r25, 0x40	; 64
    10e6:	90 93 bc 00 	sts	0x00BC, r25
    10ea:	08 95       	ret

000010ec <twiAt90can128EnableInterrupt>:
    10ec:	ec eb       	ldi	r30, 0xBC	; 188
    10ee:	f0 e0       	ldi	r31, 0x00	; 0
    10f0:	90 81       	ld	r25, Z
    10f2:	80 fb       	bst	r24, 0
    10f4:	90 f9       	bld	r25, 0
    10f6:	90 68       	ori	r25, 0x80	; 128
    10f8:	90 83       	st	Z, r25
    10fa:	08 95       	ret

000010fc <twiAt90can128EvaluateStep>:
 *  \brief  Decodes the current status to determine what to
 *          write into the Control register.
 *  \return uint8_t Returns the two wire interface current status
 *****************************************************************************/
uint8_t twiAt90can128EvaluateStep( void )
{
    10fc:	cf 92       	push	r12
    10fe:	df 92       	push	r13
    1100:	ef 92       	push	r14
    1102:	ff 92       	push	r15
    1104:	0f 93       	push	r16
    1106:	1f 93       	push	r17
    1108:	cf 93       	push	r28
    110a:	df 93       	push	r29
    twcrBf tbf;
    uint8_t ret = TW_STATUS;
    110c:	d0 91 b9 00 	lds	r29, 0x00B9
    1110:	d8 7f       	andi	r29, 0xF8	; 248

    tbf.byte = TWCR;
    1112:	c0 91 bc 00 	lds	r28, 0x00BC
    /**
     * \par Behavior
     */
    switch ( ret )
    1116:	4d 2f       	mov	r20, r29
    1118:	50 e0       	ldi	r21, 0x00	; 0
    111a:	49 3c       	cpi	r20, 0xC9	; 201
    111c:	51 05       	cpc	r21, r1
    111e:	08 f0       	brcs	.+2      	; 0x1122 <__stack+0x23>
    1120:	d9 c1       	rjmp	.+946    	; 0x14d4 <__stack+0x3d5>
    1122:	fa 01       	movw	r30, r20
    1124:	e6 5b       	subi	r30, 0xB6	; 182
    1126:	ff 4f       	sbci	r31, 0xFF	; 255
    1128:	fb c2       	rjmp	.+1526   	; 0x1720 <__tablejump2__>
    *        acquire control over the bus as the master.\n
    *      - TWSTA must be clearing in software after sending it.\n
    */
    case TW_START:                    // 0x08
    case TW_REP_START:                // 0x10
        twiMasterDataIdx = 0;
    112a:	10 92 30 02 	sts	0x0230, r1
    112e:	10 92 31 02 	sts	0x0231, r1
    1132:	10 92 32 02 	sts	0x0232, r1
    1136:	10 92 33 02 	sts	0x0233, r1
        TWDR = twiSla;                // Sending Slave Address. TWDR is
    113a:	80 91 3c 02 	lds	r24, 0x023C
    113e:	80 93 bb 00 	sts	0x00BB, r24
                                      // bidirectional.
        tbf.bits.btwen  = TW_BIT_ON;  // Make sure the Interface is on.
    1142:	c4 60       	ori	r28, 0x04	; 4
        tbf.bits.btwsta = TW_BIT_OFF; // Start already sent, must be
    1144:	cf 7d       	andi	r28, 0xDF	; 223
                                      // cleared in software.
        tbf.bits.btwsto = TW_BIT_OFF;
    1146:	cf 7e       	andi	r28, 0xEF	; 239
        tbf.bits.btwint = TW_BIT_ON;  // Must be cleared to proceed.
    1148:	c0 68       	ori	r28, 0x80	; 128
        twiInProgress   = TRUE;
    114a:	81 e0       	ldi	r24, 0x01	; 1
    114c:	80 93 27 02 	sts	0x0227, r24
        break;
    1150:	c1 c1       	rjmp	.+898    	; 0x14d4 <__stack+0x3d5>
     *       otherwise it will not proceed to the next state.\n
     *     - STOP bit condition TWSTO is cleared automatically.\n
     */
    case TW_MT_SLA_ACK:               // 0x18
    case TW_MT_DATA_ACK:              // 0x28
        if ( twiMasterDataIdx < twiMasterDataLen )
    1152:	40 91 30 02 	lds	r20, 0x0230
    1156:	50 91 31 02 	lds	r21, 0x0231
    115a:	60 91 32 02 	lds	r22, 0x0232
    115e:	70 91 33 02 	lds	r23, 0x0233
    1162:	00 91 34 02 	lds	r16, 0x0234
    1166:	10 91 35 02 	lds	r17, 0x0235
    116a:	20 91 36 02 	lds	r18, 0x0236
    116e:	30 91 37 02 	lds	r19, 0x0237
    1172:	40 17       	cp	r20, r16
    1174:	51 07       	cpc	r21, r17
    1176:	62 07       	cpc	r22, r18
    1178:	73 07       	cpc	r23, r19
    117a:	00 f5       	brcc	.+64     	; 0x11bc <__stack+0xbd>
        {
            // Writing TWDR must be done while TWINT is high, if the TWDR
            // is written when TWINT is low the TWWC bit in TWCR will be
            // be set and the operation will be canceled.
            TWDR = ( twiMasterDataBuffer )[ twiMasterDataIdx++ ];
    117c:	80 91 3a 02 	lds	r24, 0x023A
    1180:	90 91 3b 02 	lds	r25, 0x023B
    1184:	8a 01       	movw	r16, r20
    1186:	9b 01       	movw	r18, r22
    1188:	0f 5f       	subi	r16, 0xFF	; 255
    118a:	1f 4f       	sbci	r17, 0xFF	; 255
    118c:	2f 4f       	sbci	r18, 0xFF	; 255
    118e:	3f 4f       	sbci	r19, 0xFF	; 255
    1190:	00 93 30 02 	sts	0x0230, r16
    1194:	10 93 31 02 	sts	0x0231, r17
    1198:	20 93 32 02 	sts	0x0232, r18
    119c:	30 93 33 02 	sts	0x0233, r19
    11a0:	fc 01       	movw	r30, r24
    11a2:	e4 0f       	add	r30, r20
    11a4:	f5 1f       	adc	r31, r21
    11a6:	80 81       	ld	r24, Z
    11a8:	80 93 bb 00 	sts	0x00BB, r24
            tbf.bits.btwen  = TW_BIT_ON;  // Make sure the Interface is on.
    11ac:	c4 60       	ori	r28, 0x04	; 4
            tbf.bits.btwsta = TW_BIT_OFF;
    11ae:	cf 7d       	andi	r28, 0xDF	; 223
            tbf.bits.btwsto = TW_BIT_OFF;
    11b0:	cf 7e       	andi	r28, 0xEF	; 239
            tbf.bits.btwint = TW_BIT_ON;  // Must be cleared to proceed.
    11b2:	c0 68       	ori	r28, 0x80	; 128
            twiInProgress   = TRUE;
    11b4:	81 e0       	ldi	r24, 0x01	; 1
    11b6:	80 93 27 02 	sts	0x0227, r24
    11ba:	8c c1       	rjmp	.+792    	; 0x14d4 <__stack+0x3d5>
        }
        else // All data is already sent, complete the frame by sending the
             // stop condition.
        {
            twiInProgress   = FALSE;
    11bc:	10 92 27 02 	sts	0x0227, r1
            tbf.bits.btwen  = TW_BIT_ON;  // Make sure the Interface is on.
    11c0:	c4 60       	ori	r28, 0x04	; 4
            tbf.bits.btwsta = TW_BIT_OFF;
    11c2:	cf 7d       	andi	r28, 0xDF	; 223
            tbf.bits.btwsto = TW_BIT_ON;  // Stop condition send.
    11c4:	c0 61       	ori	r28, 0x10	; 16
            tbf.bits.btwea  = TW_BIT_ON;  // Allows address recognition.
    11c6:	c0 64       	ori	r28, 0x40	; 64
            tbf.bits.btwint = TW_BIT_ON;  // Must be cleared to proceed.
    11c8:	c0 68       	ori	r28, 0x80	; 128
    11ca:	84 c1       	rjmp	.+776    	; 0x14d4 <__stack+0x3d5>
     *    then continue sending the same data won't result on any change.\n
     *    - Cancel the current operation by sending STOP condition.\n
     *    - Returns to slave mode.\n
     */
    case TW_MT_DATA_NACK:             // 0x30
        tbf.bits.btwen = TW_BIT_ON;   // Make sure the Interface is on.
    11cc:	c4 60       	ori	r28, 0x04	; 4
        tbf.bits.btwsta = TW_BIT_OFF;
    11ce:	cf 7d       	andi	r28, 0xDF	; 223
        tbf.bits.btwsto = TW_BIT_ON;  // Stop condition send.
    11d0:	c0 61       	ori	r28, 0x10	; 16
        tbf.bits.btwea  = TW_BIT_ON;  // Allows address recognition.
    11d2:	c0 64       	ori	r28, 0x40	; 64
        tbf.bits.btwint = TW_BIT_ON;  // Must be cleared to proceed.
    11d4:	c0 68       	ori	r28, 0x80	; 128
        twiInProgress   = FALSE;
    11d6:	10 92 27 02 	sts	0x0227, r1
        break;
    11da:	7c c1       	rjmp	.+760    	; 0x14d4 <__stack+0x3d5>
     *    this state is reached.\n
     *    - No action other than clearing TWINT is done, data will be read
     *      at the next interruption.\n
     */
    case TW_MR_SLA_ACK:               // 0x40
         tbf.bits.btwen  = TW_BIT_ON;
    11dc:	c4 60       	ori	r28, 0x04	; 4
         tbf.bits.btwsta = TW_BIT_OFF;
    11de:	cf 7d       	andi	r28, 0xDF	; 223
         tbf.bits.btwsto = TW_BIT_OFF;
    11e0:	cf 7e       	andi	r28, 0xEF	; 239
         tbf.bits.btwint = TW_BIT_ON; // Must be cleared to proceed.
    11e2:	c0 68       	ori	r28, 0x80	; 128
         twiInProgress   = TRUE;
    11e4:	81 e0       	ldi	r24, 0x01	; 1
    11e6:	80 93 27 02 	sts	0x0227, r24
         break;
    11ea:	74 c1       	rjmp	.+744    	; 0x14d4 <__stack+0x3d5>
     *    After SLA+R the slave will start sending data while the master
     *    continues replying with an ACK. The last byte will be followed
     *    by a NACK.\n
     */
    case TW_MR_DATA_ACK:              // 0x50
        if ( twiMasterDataIdx < ( twiMasterDataLen - 1 ) )
    11ec:	00 91 34 02 	lds	r16, 0x0234
    11f0:	10 91 35 02 	lds	r17, 0x0235
    11f4:	20 91 36 02 	lds	r18, 0x0236
    11f8:	30 91 37 02 	lds	r19, 0x0237
    11fc:	40 91 30 02 	lds	r20, 0x0230
    1200:	50 91 31 02 	lds	r21, 0x0231
    1204:	60 91 32 02 	lds	r22, 0x0232
    1208:	70 91 33 02 	lds	r23, 0x0233
    120c:	68 01       	movw	r12, r16
    120e:	79 01       	movw	r14, r18
    1210:	81 e0       	ldi	r24, 0x01	; 1
    1212:	c8 1a       	sub	r12, r24
    1214:	d1 08       	sbc	r13, r1
    1216:	e1 08       	sbc	r14, r1
    1218:	f1 08       	sbc	r15, r1
    121a:	4c 15       	cp	r20, r12
    121c:	5d 05       	cpc	r21, r13
    121e:	6e 05       	cpc	r22, r14
    1220:	7f 05       	cpc	r23, r15
    1222:	08 f5       	brcc	.+66     	; 0x1266 <__stack+0x167>
        {
            ( twiMasterDataBuffer )[ twiMasterDataIdx++ ] = TWDR;
    1224:	80 91 3a 02 	lds	r24, 0x023A
    1228:	90 91 3b 02 	lds	r25, 0x023B
    122c:	8a 01       	movw	r16, r20
    122e:	9b 01       	movw	r18, r22
    1230:	0f 5f       	subi	r16, 0xFF	; 255
    1232:	1f 4f       	sbci	r17, 0xFF	; 255
    1234:	2f 4f       	sbci	r18, 0xFF	; 255
    1236:	3f 4f       	sbci	r19, 0xFF	; 255
    1238:	00 93 30 02 	sts	0x0230, r16
    123c:	10 93 31 02 	sts	0x0231, r17
    1240:	20 93 32 02 	sts	0x0232, r18
    1244:	30 93 33 02 	sts	0x0233, r19
    1248:	20 91 bb 00 	lds	r18, 0x00BB
    124c:	fc 01       	movw	r30, r24
    124e:	e4 0f       	add	r30, r20
    1250:	f5 1f       	adc	r31, r21
    1252:	20 83       	st	Z, r18
            tbf.bits.btwen  = TW_BIT_ON;
    1254:	c4 60       	ori	r28, 0x04	; 4
            tbf.bits.btwsta = TW_BIT_OFF;
    1256:	cf 7d       	andi	r28, 0xDF	; 223
            tbf.bits.btwsto = TW_BIT_OFF;
    1258:	cf 7e       	andi	r28, 0xEF	; 239
            tbf.bits.btwea  = TW_BIT_ON;  // Master sends an ACK.
    125a:	c0 64       	ori	r28, 0x40	; 64
            tbf.bits.btwint = TW_BIT_ON;  // Must be cleared to proceed.
    125c:	c0 68       	ori	r28, 0x80	; 128
            twiInProgress   = TRUE;
    125e:	81 e0       	ldi	r24, 0x01	; 1
    1260:	80 93 27 02 	sts	0x0227, r24
    1264:	37 c1       	rjmp	.+622    	; 0x14d4 <__stack+0x3d5>
        }
        else if ( twiMasterDataIdx < twiMasterDataLen )
    1266:	40 17       	cp	r20, r16
    1268:	51 07       	cpc	r21, r17
    126a:	62 07       	cpc	r22, r18
    126c:	73 07       	cpc	r23, r19
    126e:	08 f0       	brcs	.+2      	; 0x1272 <__stack+0x173>
    1270:	31 c1       	rjmp	.+610    	; 0x14d4 <__stack+0x3d5>
        {
            ( twiMasterDataBuffer )[ twiMasterDataIdx++ ] = TWDR;
    1272:	80 91 3a 02 	lds	r24, 0x023A
    1276:	90 91 3b 02 	lds	r25, 0x023B
    127a:	8a 01       	movw	r16, r20
    127c:	9b 01       	movw	r18, r22
    127e:	0f 5f       	subi	r16, 0xFF	; 255
    1280:	1f 4f       	sbci	r17, 0xFF	; 255
    1282:	2f 4f       	sbci	r18, 0xFF	; 255
    1284:	3f 4f       	sbci	r19, 0xFF	; 255
    1286:	00 93 30 02 	sts	0x0230, r16
    128a:	10 93 31 02 	sts	0x0231, r17
    128e:	20 93 32 02 	sts	0x0232, r18
    1292:	30 93 33 02 	sts	0x0233, r19
    1296:	20 91 bb 00 	lds	r18, 0x00BB
    129a:	fc 01       	movw	r30, r24
    129c:	e4 0f       	add	r30, r20
    129e:	f5 1f       	adc	r31, r21
    12a0:	20 83       	st	Z, r18
            tbf.bits.btwen  = TW_BIT_ON;
    12a2:	c4 60       	ori	r28, 0x04	; 4
            tbf.bits.btwsta = TW_BIT_OFF;
    12a4:	cf 7d       	andi	r28, 0xDF	; 223
            tbf.bits.btwsto = TW_BIT_OFF;
    12a6:	cf 7e       	andi	r28, 0xEF	; 239
            tbf.bits.btwea  = TW_BIT_OFF; // Master sends an NACK.
    12a8:	cf 7b       	andi	r28, 0xBF	; 191
            tbf.bits.btwint = TW_BIT_ON;  // Must be cleared to proceed.
    12aa:	c0 68       	ori	r28, 0x80	; 128
            twiInProgress   = TRUE;
    12ac:	81 e0       	ldi	r24, 0x01	; 1
    12ae:	80 93 27 02 	sts	0x0227, r24
    12b2:	10 c1       	rjmp	.+544    	; 0x14d4 <__stack+0x3d5>
     *    o Returns back to slave mode.
     *
     */
    case TW_MR_SLA_NACK:              // 0x48
    case TW_MT_SLA_NACK:              // 0x20
        tbf.bits.btwsto = TW_BIT_ON;  // STOP condition sent.
    12b4:	c0 61       	ori	r28, 0x10	; 16
     *    Returns to slave mode, awaiting to be addressed again.
     *    - STOP condition bit is controlled by the master.
     */
        /* No break */
    case TW_ST_LAST_DATA:             // 0xC8
        tbf.bits.btwen  = TW_BIT_ON;
    12b6:	c4 60       	ori	r28, 0x04	; 4
        tbf.bits.btwsta = TW_BIT_OFF;
    12b8:	cf 7d       	andi	r28, 0xDF	; 223
        tbf.bits.btwea  = TW_BIT_ON;  // Allows address recognition.
    12ba:	c0 64       	ori	r28, 0x40	; 64
        tbf.bits.btwint = TW_BIT_ON;  // Must be cleared to proceed.
    12bc:	c0 68       	ori	r28, 0x80	; 128
        twiInProgress   = FALSE;
    12be:	10 92 27 02 	sts	0x0227, r1
        break;
    12c2:	08 c1       	rjmp	.+528    	; 0x14d4 <__stack+0x3d5>
     *    - Returns to slave mode.
     *
     */
    case TW_SR_ARB_LOST_GCALL_ACK:    // 0x78
    case TW_SR_ARB_LOST_SLA_ACK:      // 0x68
        tbf.bits.btwen  = TW_BIT_ON;
    12c4:	c4 60       	ori	r28, 0x04	; 4
        tbf.bits.btwsto = TW_BIT_OFF;
    12c6:	cf 7e       	andi	r28, 0xEF	; 239
        tbf.bits.btwea  = TW_BIT_ON;  // Allows ACK response.
    12c8:	c0 64       	ori	r28, 0x40	; 64
        tbf.bits.btwint = TW_BIT_ON;  // Must be cleared to proceed.
    12ca:	c0 68       	ori	r28, 0x80	; 128
        twiInProgress   = TRUE;
    12cc:	81 e0       	ldi	r24, 0x01	; 1
    12ce:	80 93 27 02 	sts	0x0227, r24
        break;
    12d2:	00 c1       	rjmp	.+512    	; 0x14d4 <__stack+0x3d5>
     *   - Clear TWINT to receive data and set TWEA to be able
     *     to ACK it.\n
     */
    case TW_SR_GCALL_ACK:             // 0x70
    case TW_SR_SLA_ACK:               // 0x60
        tbf.bits.btwen  = TW_BIT_ON;
    12d4:	c4 60       	ori	r28, 0x04	; 4
        tbf.bits.btwsto = TW_BIT_OFF;
    12d6:	cf 7e       	andi	r28, 0xEF	; 239
        tbf.bits.btwea  = TW_BIT_ON;
    12d8:	c0 64       	ori	r28, 0x40	; 64
        tbf.bits.btwint = TW_BIT_ON;
    12da:	c0 68       	ori	r28, 0x80	; 128
        twiSlaveDataIdx = 0;          // New data will arrive.
    12dc:	10 92 28 02 	sts	0x0228, r1
    12e0:	10 92 29 02 	sts	0x0229, r1
    12e4:	10 92 2a 02 	sts	0x022A, r1
    12e8:	10 92 2b 02 	sts	0x022B, r1
        // Allows an external module to handle the data queue.
        cbSetRXBuffer( &twiSlaveDataBuffer, &twiSlaveDataLen );
    12ec:	6c e2       	ldi	r22, 0x2C	; 44
    12ee:	72 e0       	ldi	r23, 0x02	; 2
    12f0:	88 e3       	ldi	r24, 0x38	; 56
    12f2:	92 e0       	ldi	r25, 0x02	; 2
    12f4:	6e dc       	rcall	.-1828   	; 0xbd2 <cbSetRXBuffer>
        twiInProgress   = TRUE;
    12f6:	81 e0       	ldi	r24, 0x01	; 1
    12f8:	80 93 27 02 	sts	0x0227, r24
        break;
    12fc:	eb c0       	rjmp	.+470    	; 0x14d4 <__stack+0x3d5>
    /** - Slave received data and sends ACK\n
     */
    case TW_SR_DATA_ACK:              // 0x80
    case TW_SR_GCALL_DATA_ACK:        // 0x90
        if ( twiSlaveDataIdx < twiSlaveDataLen )
    12fe:	40 91 28 02 	lds	r20, 0x0228
    1302:	50 91 29 02 	lds	r21, 0x0229
    1306:	60 91 2a 02 	lds	r22, 0x022A
    130a:	70 91 2b 02 	lds	r23, 0x022B
    130e:	00 91 2c 02 	lds	r16, 0x022C
    1312:	10 91 2d 02 	lds	r17, 0x022D
    1316:	20 91 2e 02 	lds	r18, 0x022E
    131a:	30 91 2f 02 	lds	r19, 0x022F
    131e:	40 17       	cp	r20, r16
    1320:	51 07       	cpc	r21, r17
    1322:	62 07       	cpc	r22, r18
    1324:	73 07       	cpc	r23, r19
    1326:	00 f5       	brcc	.+64     	; 0x1368 <__stack+0x269>
        {
            twiSlaveDataBuffer[ twiSlaveDataIdx++ ] = TWDR;
    1328:	80 91 38 02 	lds	r24, 0x0238
    132c:	90 91 39 02 	lds	r25, 0x0239
    1330:	8a 01       	movw	r16, r20
    1332:	9b 01       	movw	r18, r22
    1334:	0f 5f       	subi	r16, 0xFF	; 255
    1336:	1f 4f       	sbci	r17, 0xFF	; 255
    1338:	2f 4f       	sbci	r18, 0xFF	; 255
    133a:	3f 4f       	sbci	r19, 0xFF	; 255
    133c:	00 93 28 02 	sts	0x0228, r16
    1340:	10 93 29 02 	sts	0x0229, r17
    1344:	20 93 2a 02 	sts	0x022A, r18
    1348:	30 93 2b 02 	sts	0x022B, r19
    134c:	20 91 bb 00 	lds	r18, 0x00BB
    1350:	fc 01       	movw	r30, r24
    1352:	e4 0f       	add	r30, r20
    1354:	f5 1f       	adc	r31, r21
    1356:	20 83       	st	Z, r18
            tbf.bits.btwen  = TW_BIT_ON;
    1358:	c4 60       	ori	r28, 0x04	; 4
            tbf.bits.btwsto = TW_BIT_OFF;
    135a:	cf 7e       	andi	r28, 0xEF	; 239
            tbf.bits.btwea  = TW_BIT_ON;
    135c:	c0 64       	ori	r28, 0x40	; 64
            tbf.bits.btwint = TW_BIT_ON;
    135e:	c0 68       	ori	r28, 0x80	; 128
            twiInProgress   = TRUE;
    1360:	81 e0       	ldi	r24, 0x01	; 1
    1362:	80 93 27 02 	sts	0x0227, r24
    1366:	b6 c0       	rjmp	.+364    	; 0x14d4 <__stack+0x3d5>
        }
        else
        {
            tbf.bits.btwen  = TW_BIT_ON;
    1368:	c4 60       	ori	r28, 0x04	; 4
            tbf.bits.btwsto = TW_BIT_OFF;
    136a:	cf 7e       	andi	r28, 0xEF	; 239
            tbf.bits.btwea  = TW_BIT_OFF; // NACK, can't handle
    136c:	cf 7b       	andi	r28, 0xBF	; 191
                                          // more data
            tbf.bits.btwint = TW_BIT_ON;
    136e:	c0 68       	ori	r28, 0x80	; 128
            twiInProgress   = TRUE;
    1370:	81 e0       	ldi	r24, 0x01	; 1
    1372:	80 93 27 02 	sts	0x0227, r24
    1376:	ae c0       	rjmp	.+348    	; 0x14d4 <__stack+0x3d5>
     *    - Restarts slave mode to idle state, until its
     *    address is recognized again.\n
     */

    case TW_SR_STOP:                  // 0xA0
	    cbDecodeReceivedData( twiSlaveDataBuffer, twiSlaveDataIdx );
    1378:	40 91 28 02 	lds	r20, 0x0228
    137c:	50 91 29 02 	lds	r21, 0x0229
    1380:	60 91 2a 02 	lds	r22, 0x022A
    1384:	70 91 2b 02 	lds	r23, 0x022B
    1388:	80 91 38 02 	lds	r24, 0x0238
    138c:	90 91 39 02 	lds	r25, 0x0239
    1390:	e7 dc       	rcall	.-1586   	; 0xd60 <cbDecodeReceivedData>
		/* No break */
	case TW_SR_GCALL_DATA_NACK:       // 0x98
    case TW_ST_DATA_NACK:             // 0xC0
    case TW_SR_DATA_NACK:             // 0x88    
        tbf.bits.btwen  = TW_BIT_ON;
    1392:	c4 60       	ori	r28, 0x04	; 4
        tbf.bits.btwsta = TW_BIT_OFF;
    1394:	cf 7d       	andi	r28, 0xDF	; 223
        tbf.bits.btwsto = TW_BIT_OFF;
    1396:	cf 7e       	andi	r28, 0xEF	; 239
        tbf.bits.btwea  = TW_BIT_ON;  // Allows address recognition
    1398:	c0 64       	ori	r28, 0x40	; 64
        tbf.bits.btwint = TW_BIT_ON;    
    139a:	c0 68       	ori	r28, 0x80	; 128
        twiInProgress   = FALSE;
    139c:	10 92 27 02 	sts	0x0227, r1
        break;
    13a0:	99 c0       	rjmp	.+306    	; 0x14d4 <__stack+0x3d5>
    case TW_ST_ARB_LOST_SLA_ACK:      // 0xB0
        /* No break */
    /** - Slave acknowledged the address, data transfer starts\n
     */
    case TW_ST_SLA_ACK:               // 0xA8
        twiSlaveDataIdx    = 0;
    13a2:	10 92 28 02 	sts	0x0228, r1
    13a6:	10 92 29 02 	sts	0x0229, r1
    13aa:	10 92 2a 02 	sts	0x022A, r1
    13ae:	10 92 2b 02 	sts	0x022B, r1
        cbSetTXBuffer( &twiSlaveDataBuffer, &twiSlaveDataLen );
    13b2:	6c e2       	ldi	r22, 0x2C	; 44
    13b4:	72 e0       	ldi	r23, 0x02	; 2
    13b6:	88 e3       	ldi	r24, 0x38	; 56
    13b8:	92 e0       	ldi	r25, 0x02	; 2
    13ba:	24 dc       	rcall	.-1976   	; 0xc04 <cbSetTXBuffer>
        twiSlaveDataLen = cbFetchData( twiSlaveDataBuffer );
    13bc:	80 91 38 02 	lds	r24, 0x0238
    13c0:	90 91 39 02 	lds	r25, 0x0239
    13c4:	57 dd       	rcall	.-1362   	; 0xe74 <cbFetchData>
    13c6:	60 93 2c 02 	sts	0x022C, r22
    13ca:	70 93 2d 02 	sts	0x022D, r23
    13ce:	80 93 2e 02 	sts	0x022E, r24
    13d2:	90 93 2f 02 	sts	0x022F, r25
        /* No break */
    case TW_ST_DATA_ACK:              // 0xB8
        if ( ( twiSlaveDataLen ) && ( ( twiSlaveDataLen - 1 ) > twiSlaveDataIdx ) )
    13d6:	40 91 2c 02 	lds	r20, 0x022C
    13da:	50 91 2d 02 	lds	r21, 0x022D
    13de:	60 91 2e 02 	lds	r22, 0x022E
    13e2:	70 91 2f 02 	lds	r23, 0x022F
    13e6:	41 15       	cp	r20, r1
    13e8:	51 05       	cpc	r21, r1
    13ea:	61 05       	cpc	r22, r1
    13ec:	71 05       	cpc	r23, r1
    13ee:	09 f4       	brne	.+2      	; 0x13f2 <__stack+0x2f3>
    13f0:	59 c0       	rjmp	.+178    	; 0x14a4 <__stack+0x3a5>
    13f2:	00 91 28 02 	lds	r16, 0x0228
    13f6:	10 91 29 02 	lds	r17, 0x0229
    13fa:	20 91 2a 02 	lds	r18, 0x022A
    13fe:	30 91 2b 02 	lds	r19, 0x022B
    1402:	6a 01       	movw	r12, r20
    1404:	7b 01       	movw	r14, r22
    1406:	81 e0       	ldi	r24, 0x01	; 1
    1408:	c8 1a       	sub	r12, r24
    140a:	d1 08       	sbc	r13, r1
    140c:	e1 08       	sbc	r14, r1
    140e:	f1 08       	sbc	r15, r1
    1410:	0c 15       	cp	r16, r12
    1412:	1d 05       	cpc	r17, r13
    1414:	2e 05       	cpc	r18, r14
    1416:	3f 05       	cpc	r19, r15
    1418:	00 f5       	brcc	.+64     	; 0x145a <__stack+0x35b>
        {
            TWDR = twiSlaveDataBuffer[ twiSlaveDataIdx++ ];
    141a:	80 91 38 02 	lds	r24, 0x0238
    141e:	90 91 39 02 	lds	r25, 0x0239
    1422:	b9 01       	movw	r22, r18
    1424:	a8 01       	movw	r20, r16
    1426:	4f 5f       	subi	r20, 0xFF	; 255
    1428:	5f 4f       	sbci	r21, 0xFF	; 255
    142a:	6f 4f       	sbci	r22, 0xFF	; 255
    142c:	7f 4f       	sbci	r23, 0xFF	; 255
    142e:	40 93 28 02 	sts	0x0228, r20
    1432:	50 93 29 02 	sts	0x0229, r21
    1436:	60 93 2a 02 	sts	0x022A, r22
    143a:	70 93 2b 02 	sts	0x022B, r23
    143e:	fc 01       	movw	r30, r24
    1440:	e0 0f       	add	r30, r16
    1442:	f1 1f       	adc	r31, r17
    1444:	80 81       	ld	r24, Z
    1446:	80 93 bb 00 	sts	0x00BB, r24
            tbf.bits.btwen  = TW_BIT_ON;
    144a:	c4 60       	ori	r28, 0x04	; 4
            tbf.bits.btwsto = TW_BIT_OFF;
    144c:	cf 7e       	andi	r28, 0xEF	; 239
            tbf.bits.btwea  = TW_BIT_ON; // Allows ACK reply
    144e:	c0 64       	ori	r28, 0x40	; 64
            tbf.bits.btwint = TW_BIT_ON;
    1450:	c0 68       	ori	r28, 0x80	; 128
            twiInProgress   = TRUE;
    1452:	81 e0       	ldi	r24, 0x01	; 1
    1454:	80 93 27 02 	sts	0x0227, r24
    1458:	3d c0       	rjmp	.+122    	; 0x14d4 <__stack+0x3d5>
        }
        else if ( twiSlaveDataLen > twiSlaveDataIdx )
    145a:	04 17       	cp	r16, r20
    145c:	15 07       	cpc	r17, r21
    145e:	26 07       	cpc	r18, r22
    1460:	37 07       	cpc	r19, r23
    1462:	00 f5       	brcc	.+64     	; 0x14a4 <__stack+0x3a5>
        {
            TWDR = twiSlaveDataBuffer[ twiSlaveDataIdx++ ];
    1464:	80 91 38 02 	lds	r24, 0x0238
    1468:	90 91 39 02 	lds	r25, 0x0239
    146c:	b9 01       	movw	r22, r18
    146e:	a8 01       	movw	r20, r16
    1470:	4f 5f       	subi	r20, 0xFF	; 255
    1472:	5f 4f       	sbci	r21, 0xFF	; 255
    1474:	6f 4f       	sbci	r22, 0xFF	; 255
    1476:	7f 4f       	sbci	r23, 0xFF	; 255
    1478:	40 93 28 02 	sts	0x0228, r20
    147c:	50 93 29 02 	sts	0x0229, r21
    1480:	60 93 2a 02 	sts	0x022A, r22
    1484:	70 93 2b 02 	sts	0x022B, r23
    1488:	fc 01       	movw	r30, r24
    148a:	e0 0f       	add	r30, r16
    148c:	f1 1f       	adc	r31, r17
    148e:	80 81       	ld	r24, Z
    1490:	80 93 bb 00 	sts	0x00BB, r24
            tbf.bits.btwen  = TW_BIT_ON;
    1494:	c4 60       	ori	r28, 0x04	; 4
            tbf.bits.btwsto = TW_BIT_OFF;
    1496:	cf 7e       	andi	r28, 0xEF	; 239
            tbf.bits.btwea  = TW_BIT_OFF; // Last byte sends NACK
    1498:	cf 7b       	andi	r28, 0xBF	; 191
            tbf.bits.btwint = TW_BIT_ON;
    149a:	c0 68       	ori	r28, 0x80	; 128
            twiInProgress   = TRUE;
    149c:	81 e0       	ldi	r24, 0x01	; 1
    149e:	80 93 27 02 	sts	0x0227, r24
    14a2:	18 c0       	rjmp	.+48     	; 0x14d4 <__stack+0x3d5>
        }
        else
        {
			TWDR = 0x00;
    14a4:	10 92 bb 00 	sts	0x00BB, r1
            tbf.bits.btwen  = TW_BIT_ON;
    14a8:	c4 60       	ori	r28, 0x04	; 4
            tbf.bits.btwsto = TW_BIT_OFF;
    14aa:	cf 7e       	andi	r28, 0xEF	; 239
            tbf.bits.btwea  = TW_BIT_OFF; // Last byte sends NACK
    14ac:	cf 7b       	andi	r28, 0xBF	; 191
            tbf.bits.btwint = TW_BIT_ON;
    14ae:	c0 68       	ori	r28, 0x80	; 128
            twiInProgress   = TRUE;
    14b0:	81 e0       	ldi	r24, 0x01	; 1
    14b2:	80 93 27 02 	sts	0x0227, r24
    14b6:	0e c0       	rjmp	.+28     	; 0x14d4 <__stack+0x3d5>
     *    - Slave Mode entered\n
     *    - Does not hold SCL low by clearing TWINT.\n
     */
    case TW_MT_ARB_LOST:              // 0x38
//    case TW_MR_ARB_LOST:            // 0x38
        tbf.bits.btwen  = TW_BIT_ON;
    14b8:	c4 60       	ori	r28, 0x04	; 4
        tbf.bits.btwsta = TW_BIT_OFF;
    14ba:	cf 7d       	andi	r28, 0xDF	; 223
        tbf.bits.btwsto = TW_BIT_OFF;
    14bc:	cf 7e       	andi	r28, 0xEF	; 239
        tbf.bits.btwint = TW_BIT_ON;  // Must be cleared to proceed.
    14be:	c0 68       	ori	r28, 0x80	; 128
        tbf.bits.btwea  = TW_BIT_ON;  // Allows address recognition.
    14c0:	c0 64       	ori	r28, 0x40	; 64
        twiInProgress   = FALSE;
    14c2:	10 92 27 02 	sts	0x0227, r1
        break;
    14c6:	06 c0       	rjmp	.+12     	; 0x14d4 <__stack+0x3d5>
     *    is sent at an illegal position, such as a data/address transfer,
     *    or ACK transfer/reception.\n
     *    - To recover from error sent STOP condition.\n
     */
    case TW_BUS_ERROR:                // 0x00
        tbf.bits.btwsta = TW_BIT_OFF;
    14c8:	cf 7d       	andi	r28, 0xDF	; 223
        tbf.bits.btwsto = TW_BIT_ON;  // Sends STOP condition.
    14ca:	c0 61       	ori	r28, 0x10	; 16
        tbf.bits.btwea  = TW_BIT_ON;  // Allows address recognition.
    14cc:	c0 64       	ori	r28, 0x40	; 64
        tbf.bits.btwint = TW_BIT_ON;
    14ce:	c0 68       	ori	r28, 0x80	; 128
        twiInProgress   = FALSE;
    14d0:	10 92 27 02 	sts	0x0227, r1
        break;


    }

    TWCR = tbf.byte;
    14d4:	c0 93 bc 00 	sts	0x00BC, r28
    return ret;
}
    14d8:	8d 2f       	mov	r24, r29
    14da:	df 91       	pop	r29
    14dc:	cf 91       	pop	r28
    14de:	1f 91       	pop	r17
    14e0:	0f 91       	pop	r16
    14e2:	ff 90       	pop	r15
    14e4:	ef 90       	pop	r14
    14e6:	df 90       	pop	r13
    14e8:	cf 90       	pop	r12
    14ea:	08 95       	ret

000014ec <__vector_35>:
 *  \note   The interruption flag is cleared in software by writing a one
 *          on it.
 *  \return
 *****************************************************************************/
ISR( TWI_vect)
{
    14ec:	1f 92       	push	r1
    14ee:	0f 92       	push	r0
    14f0:	0f b6       	in	r0, 0x3f	; 63
    14f2:	0f 92       	push	r0
    14f4:	11 24       	eor	r1, r1
    14f6:	0b b6       	in	r0, 0x3b	; 59
    14f8:	0f 92       	push	r0
    14fa:	2f 93       	push	r18
    14fc:	3f 93       	push	r19
    14fe:	4f 93       	push	r20
    1500:	5f 93       	push	r21
    1502:	6f 93       	push	r22
    1504:	7f 93       	push	r23
    1506:	8f 93       	push	r24
    1508:	9f 93       	push	r25
    150a:	af 93       	push	r26
    150c:	bf 93       	push	r27
    150e:	ef 93       	push	r30
    1510:	ff 93       	push	r31
	twiAt90can128EvaluateStep();
    1512:	f4 dd       	rcall	.-1048   	; 0x10fc <twiAt90can128EvaluateStep>
}
    1514:	ff 91       	pop	r31
    1516:	ef 91       	pop	r30
    1518:	bf 91       	pop	r27
    151a:	af 91       	pop	r26
    151c:	9f 91       	pop	r25
    151e:	8f 91       	pop	r24
    1520:	7f 91       	pop	r23
    1522:	6f 91       	pop	r22
    1524:	5f 91       	pop	r21
    1526:	4f 91       	pop	r20
    1528:	3f 91       	pop	r19
    152a:	2f 91       	pop	r18
    152c:	0f 90       	pop	r0
    152e:	0b be       	out	0x3b, r0	; 59
    1530:	0f 90       	pop	r0
    1532:	0f be       	out	0x3f, r0	; 63
    1534:	0f 90       	pop	r0
    1536:	1f 90       	pop	r1
    1538:	18 95       	reti

0000153a <UART_Receive>:
 *  \warning Warning.
 *  \author Author
 ****************************************************************************************/
void UART_setBusy( uint8_t val )
{
    uart_in_progress = val;
    153a:	20 91 c0 00 	lds	r18, 0x00C0
    153e:	22 23       	and	r18, r18
    1540:	54 f4       	brge	.+20     	; 0x1556 <UART_Receive+0x1c>
    1542:	20 91 c0 00 	lds	r18, 0x00C0
    1546:	30 91 c6 00 	lds	r19, 0x00C6
    154a:	23 fd       	sbrc	r18, 3
    154c:	06 c0       	rjmp	.+12     	; 0x155a <UART_Receive+0x20>
    154e:	fc 01       	movw	r30, r24
    1550:	30 83       	st	Z, r19
    1552:	81 e0       	ldi	r24, 0x01	; 1
    1554:	08 95       	ret
    1556:	80 e0       	ldi	r24, 0x00	; 0
    1558:	08 95       	ret
    155a:	80 e0       	ldi	r24, 0x00	; 0
    155c:	08 95       	ret

0000155e <__vector_21>:
 *  \note First Implementation 9:05:16 AM Jul 13, 2015
 *  \warning Warning.
 *  \author Author
 ****************************************************************************************/
ISR( USART0_RX_vect )
{
    155e:	1f 92       	push	r1
    1560:	0f 92       	push	r0
    1562:	0f b6       	in	r0, 0x3f	; 63
    1564:	0f 92       	push	r0
    1566:	11 24       	eor	r1, r1
    1568:	0b b6       	in	r0, 0x3b	; 59
    156a:	0f 92       	push	r0
    156c:	ef 92       	push	r14
    156e:	ff 92       	push	r15
    1570:	0f 93       	push	r16
    1572:	1f 93       	push	r17
    1574:	2f 93       	push	r18
    1576:	3f 93       	push	r19
    1578:	4f 93       	push	r20
    157a:	5f 93       	push	r21
    157c:	6f 93       	push	r22
    157e:	7f 93       	push	r23
    1580:	8f 93       	push	r24
    1582:	9f 93       	push	r25
    1584:	af 93       	push	r26
    1586:	bf 93       	push	r27
    1588:	ef 93       	push	r30
    158a:	ff 93       	push	r31
    158c:	cf 93       	push	r28
    158e:	df 93       	push	r29
    1590:	1f 92       	push	r1
    1592:	cd b7       	in	r28, 0x3d	; 61
    1594:	de b7       	in	r29, 0x3e	; 62
    uint8_t data = 0;
    1596:	19 82       	std	Y+1, r1	; 0x01
    uint8_t valid_buff = 0;
	uint8_t valid_read = 0;
    valid_read = UART_Receive( &data);
    1598:	ce 01       	movw	r24, r28
    159a:	01 96       	adiw	r24, 0x01	; 1
    159c:	ce df       	rcall	.-100    	; 0x153a <UART_Receive>
    if ( !UART_IsBusy( ) && valid_read )
    159e:	90 91 3d 02 	lds	r25, 0x023D
    15a2:	91 11       	cpse	r25, r1
    15a4:	2e c0       	rjmp	.+92     	; 0x1602 <__vector_21+0xa4>
    15a6:	88 23       	and	r24, r24
    15a8:	09 f4       	brne	.+2      	; 0x15ac <__vector_21+0x4e>
    15aa:	91 c0       	rjmp	.+290    	; 0x16ce <__vector_21+0x170>
    {
        valid_buff = ( ( uart_rx_buffer ) && ( uart_rx_len ) );
    15ac:	80 91 4a 02 	lds	r24, 0x024A
    15b0:	90 91 4b 02 	lds	r25, 0x024B
    15b4:	89 2b       	or	r24, r25
    15b6:	09 f4       	brne	.+2      	; 0x15ba <__vector_21+0x5c>
    15b8:	8a c0       	rjmp	.+276    	; 0x16ce <__vector_21+0x170>
    15ba:	80 91 46 02 	lds	r24, 0x0246
    15be:	90 91 47 02 	lds	r25, 0x0247
    15c2:	a0 91 48 02 	lds	r26, 0x0248
    15c6:	b0 91 49 02 	lds	r27, 0x0249
    15ca:	89 2b       	or	r24, r25
    15cc:	8a 2b       	or	r24, r26
    15ce:	8b 2b       	or	r24, r27
    15d0:	09 f0       	breq	.+2      	; 0x15d4 <__vector_21+0x76>
    15d2:	56 c0       	rjmp	.+172    	; 0x1680 <__vector_21+0x122>
    15d4:	7c c0       	rjmp	.+248    	; 0x16ce <__vector_21+0x170>
 *  \warning Warning.
 *  \author Author
 ****************************************************************************************/
void UART_setBusy( uint8_t val )
{
    uart_in_progress = val;
    15d6:	81 e0       	ldi	r24, 0x01	; 1
    15d8:	80 93 3d 02 	sts	0x023D, r24
        valid_buff = ( ( uart_rx_buffer ) && ( uart_rx_len ) );
        if ( valid_buff && cbStartOfFrame( data ) )
        {
            UART_setBusy( TRUE );
            uart_rx_idx = 0;
            uart_rx_buffer[ uart_rx_idx++ ] = data;
    15dc:	e0 91 4a 02 	lds	r30, 0x024A
    15e0:	f0 91 4b 02 	lds	r31, 0x024B
    15e4:	81 e0       	ldi	r24, 0x01	; 1
    15e6:	90 e0       	ldi	r25, 0x00	; 0
    15e8:	a0 e0       	ldi	r26, 0x00	; 0
    15ea:	b0 e0       	ldi	r27, 0x00	; 0
    15ec:	80 93 3e 02 	sts	0x023E, r24
    15f0:	90 93 3f 02 	sts	0x023F, r25
    15f4:	a0 93 40 02 	sts	0x0240, r26
    15f8:	b0 93 41 02 	sts	0x0241, r27
    15fc:	89 81       	ldd	r24, Y+1	; 0x01
    15fe:	80 83       	st	Z, r24
    1600:	66 c0       	rjmp	.+204    	; 0x16ce <__vector_21+0x170>
        }
    }
    else if ( valid_read )
    1602:	88 23       	and	r24, r24
    1604:	09 f4       	brne	.+2      	; 0x1608 <__vector_21+0xaa>
    1606:	63 c0       	rjmp	.+198    	; 0x16ce <__vector_21+0x170>
    {
        valid_buff = ( ( uart_rx_buffer ) && ( uart_rx_len ) );
    1608:	20 91 4a 02 	lds	r18, 0x024A
    160c:	30 91 4b 02 	lds	r19, 0x024B
    1610:	21 15       	cp	r18, r1
    1612:	31 05       	cpc	r19, r1
    1614:	09 f4       	brne	.+2      	; 0x1618 <__vector_21+0xba>
    1616:	5b c0       	rjmp	.+182    	; 0x16ce <__vector_21+0x170>
    1618:	80 91 46 02 	lds	r24, 0x0246
    161c:	90 91 47 02 	lds	r25, 0x0247
    1620:	a0 91 48 02 	lds	r26, 0x0248
    1624:	b0 91 49 02 	lds	r27, 0x0249
    1628:	00 97       	sbiw	r24, 0x00	; 0
    162a:	a1 05       	cpc	r26, r1
    162c:	b1 05       	cpc	r27, r1
    162e:	69 f5       	brne	.+90     	; 0x168a <__vector_21+0x12c>
    1630:	4e c0       	rjmp	.+156    	; 0x16ce <__vector_21+0x170>
        if ( ( valid_buff ) && ( uart_rx_len > uart_rx_idx ) )
        {
            uart_rx_buffer[ uart_rx_idx++ ] = data;
    1632:	db 01       	movw	r26, r22
    1634:	ca 01       	movw	r24, r20
    1636:	01 96       	adiw	r24, 0x01	; 1
    1638:	a1 1d       	adc	r26, r1
    163a:	b1 1d       	adc	r27, r1
    163c:	80 93 3e 02 	sts	0x023E, r24
    1640:	90 93 3f 02 	sts	0x023F, r25
    1644:	a0 93 40 02 	sts	0x0240, r26
    1648:	b0 93 41 02 	sts	0x0241, r27
    164c:	89 81       	ldd	r24, Y+1	; 0x01
    164e:	f9 01       	movw	r30, r18
    1650:	e4 0f       	add	r30, r20
    1652:	f5 1f       	adc	r31, r21
    1654:	80 83       	st	Z, r24
    1656:	26 c0       	rjmp	.+76     	; 0x16a4 <__vector_21+0x146>
        }
        if ( ( valid_buff ) && ( uart_rx_len == uart_rx_idx ) )
        {
            cbCommitData( uart_rx_buffer, uart_tx_buffer, uart_tx_idx, uart_rx_idx );
    1658:	20 91 42 02 	lds	r18, 0x0242
    165c:	30 91 43 02 	lds	r19, 0x0243
    1660:	40 91 44 02 	lds	r20, 0x0244
    1664:	50 91 45 02 	lds	r21, 0x0245
    1668:	60 91 4c 02 	lds	r22, 0x024C
    166c:	70 91 4d 02 	lds	r23, 0x024D
    1670:	80 91 4a 02 	lds	r24, 0x024A
    1674:	90 91 4b 02 	lds	r25, 0x024B
    1678:	0f db       	rcall	.-2530   	; 0xc98 <cbCommitData>
 *  \warning Warning.
 *  \author Author
 ****************************************************************************************/
void UART_setBusy( uint8_t val )
{
    uart_in_progress = val;
    167a:	10 92 3d 02 	sts	0x023D, r1
    167e:	27 c0       	rjmp	.+78     	; 0x16ce <__vector_21+0x170>
	uint8_t valid_read = 0;
    valid_read = UART_Receive( &data);
    if ( !UART_IsBusy( ) && valid_read )
    {
        valid_buff = ( ( uart_rx_buffer ) && ( uart_rx_len ) );
        if ( valid_buff && cbStartOfFrame( data ) )
    1680:	89 81       	ldd	r24, Y+1	; 0x01
    1682:	d9 da       	rcall	.-2638   	; 0xc36 <cbStartOfFrame>
    1684:	88 23       	and	r24, r24
    1686:	19 f1       	breq	.+70     	; 0x16ce <__vector_21+0x170>
    1688:	a6 cf       	rjmp	.-180    	; 0x15d6 <__vector_21+0x78>
        }
    }
    else if ( valid_read )
    {
        valid_buff = ( ( uart_rx_buffer ) && ( uart_rx_len ) );
        if ( ( valid_buff ) && ( uart_rx_len > uart_rx_idx ) )
    168a:	40 91 3e 02 	lds	r20, 0x023E
    168e:	50 91 3f 02 	lds	r21, 0x023F
    1692:	60 91 40 02 	lds	r22, 0x0240
    1696:	70 91 41 02 	lds	r23, 0x0241
    169a:	48 17       	cp	r20, r24
    169c:	59 07       	cpc	r21, r25
    169e:	6a 07       	cpc	r22, r26
    16a0:	7b 07       	cpc	r23, r27
    16a2:	38 f2       	brcs	.-114    	; 0x1632 <__vector_21+0xd4>
        {
            uart_rx_buffer[ uart_rx_idx++ ] = data;
        }
        if ( ( valid_buff ) && ( uart_rx_len == uart_rx_idx ) )
    16a4:	e0 90 46 02 	lds	r14, 0x0246
    16a8:	f0 90 47 02 	lds	r15, 0x0247
    16ac:	00 91 48 02 	lds	r16, 0x0248
    16b0:	10 91 49 02 	lds	r17, 0x0249
    16b4:	80 91 3e 02 	lds	r24, 0x023E
    16b8:	90 91 3f 02 	lds	r25, 0x023F
    16bc:	a0 91 40 02 	lds	r26, 0x0240
    16c0:	b0 91 41 02 	lds	r27, 0x0241
    16c4:	e8 16       	cp	r14, r24
    16c6:	f9 06       	cpc	r15, r25
    16c8:	0a 07       	cpc	r16, r26
    16ca:	1b 07       	cpc	r17, r27
    16cc:	29 f2       	breq	.-118    	; 0x1658 <__vector_21+0xfa>
        {
            cbCommitData( uart_rx_buffer, uart_tx_buffer, uart_tx_idx, uart_rx_idx );
            UART_setBusy( FALSE );
        }
    }
}
    16ce:	0f 90       	pop	r0
    16d0:	df 91       	pop	r29
    16d2:	cf 91       	pop	r28
    16d4:	ff 91       	pop	r31
    16d6:	ef 91       	pop	r30
    16d8:	bf 91       	pop	r27
    16da:	af 91       	pop	r26
    16dc:	9f 91       	pop	r25
    16de:	8f 91       	pop	r24
    16e0:	7f 91       	pop	r23
    16e2:	6f 91       	pop	r22
    16e4:	5f 91       	pop	r21
    16e6:	4f 91       	pop	r20
    16e8:	3f 91       	pop	r19
    16ea:	2f 91       	pop	r18
    16ec:	1f 91       	pop	r17
    16ee:	0f 91       	pop	r16
    16f0:	ff 90       	pop	r15
    16f2:	ef 90       	pop	r14
    16f4:	0f 90       	pop	r0
    16f6:	0b be       	out	0x3b, r0	; 59
    16f8:	0f 90       	pop	r0
    16fa:	0f be       	out	0x3f, r0	; 63
    16fc:	0f 90       	pop	r0
    16fe:	1f 90       	pop	r1
    1700:	18 95       	reti

00001702 <watchdog_reset>:
 *  \warning Warning.
 *  \author Author
 ****************************************************************************************/
void watchdog_off(void)
{
	wdt_disable();
    1702:	a8 95       	wdr
    1704:	08 95       	ret

00001706 <watchdog_on>:
 *  \author Author
 ****************************************************************************************/
void watchdog_on(WATCHDOG_COMMON_TIMES param)
{
	/* Write logical one to WDCE and WDE */
	wdt_enable(param);
    1706:	87 70       	andi	r24, 0x07	; 7
    1708:	88 60       	ori	r24, 0x08	; 8
    170a:	28 e1       	ldi	r18, 0x18	; 24
    170c:	30 e0       	ldi	r19, 0x00	; 0
    170e:	0f b6       	in	r0, 0x3f	; 63
    1710:	f8 94       	cli
    1712:	a8 95       	wdr
    1714:	20 93 60 00 	sts	0x0060, r18
    1718:	0f be       	out	0x3f, r0	; 63
    171a:	80 93 60 00 	sts	0x0060, r24
    171e:	08 95       	ret

00001720 <__tablejump2__>:
    1720:	ee 0f       	add	r30, r30
    1722:	ff 1f       	adc	r31, r31

00001724 <__tablejump__>:
    1724:	05 90       	lpm	r0, Z+
    1726:	f4 91       	lpm	r31, Z
    1728:	e0 2d       	mov	r30, r0
    172a:	09 94       	ijmp

0000172c <_exit>:
    172c:	f8 94       	cli

0000172e <__stop_program>:
    172e:	ff cf       	rjmp	.-2      	; 0x172e <__stop_program>
